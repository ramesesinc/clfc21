import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;
import java.text.DecimalFormat;

class LegalFollowUpReportService extends ActiveCrudListService {
	
	@Env
	def env;

	@ActiveDB("followup_report")
	def em;

	@Service('BranchService')
	def branchService;

	@Service("DateService")
	def dateService;

	private def DATE_FORMAT1 = new SimpleDateFormat("MMMMM dd, yyyy");
	private def DATE_FORMAT2 = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");

	@ProxyMethod
	public def getColumns( params ) {
		def list = [];
		list << [name: 'txndate', caption: 'Report Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		list << [name: 'author.name', caption: 'Created By'];
		list << [name: 'modifiedby.name', caption: 'Last Modified By'];
		//list << [name: 'dtcreated', caption: 'Date Created'];
		//list << [name: 'dtmodified', caption: 'Date Modified'];
		//list << [name: 'modifiedby.objid', caption: 'Modified By Objid'];
		//list << [name: 'modifiedby.name', caption: 'Modified By Name'];
		//list << [name: 'author.objid', caption: 'Author Objid'];
		//list << [name: 'author.name', caption: 'Author Name'];
		//list << [name: 'reportnote', caption: 'Note'];

		return list;
	}	

	void validate( data ) {
		def serverdate = java.sql.Date.valueOf( dateService.getServerDateAsString().split(" ")[0] );
		def date = java.sql.Date.valueOf( data.txndate.toString() );
		if (date.after( serverdate )) {
			throw new RuntimeException("Cannot create note beyond current date.");
		}
	}

	void beforeCreate( entity ){
		entity.dtcreated = dateService.serverDate;
		entity.author = [objid: env.USERID, name: env.NAME];
		validate( entity );
	}

	void beforeUpdate(entity){
		entity.dtmodified = dateService.serverDate;
		entity.modifiedby = [objid: env.USERID, name: env.NAME];
		validate( entity );
	}

	@ProxyMethod
	public def getReportData(params){

		def reportdata = em.read([objid: params.objid]);

		def txndate = parseDate(params.date);

		def list = em.getMergeFollowUpReportDetail([date: txndate]);
		if (!list) {
			throw new RuntimeException("No Follow-up Result for " + txndate + ".");
		}
		
		def serverdate = dateService.serverDate;
		def branch = branchService.open([:]);
		def data = [
			date_period : DATE_FORMAT1.format(txndate),
			dtprinted	: DATE_FORMAT2.format(serverdate),
			printedby 	: env.NAME,
			items		: list,
			txndate 	: reportdata.txndate,
			reportnote 	: reportdata.reportnote
		];
		
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	def parseDate( date ){
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}