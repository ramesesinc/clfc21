import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class CollectionSummaryReportService
{	
	@Env
	def env;

	@ActiveDB("collection_remittance")
	def em;

	@ActiveDB("loan_route")
	def loan_route;

	@ActiveDB('otherreceipt')
	def otherreceipt;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	def dateFormat = new SimpleDateFormat('yyyy-MMM-dd');

	@Async
	@ProxyMethod
	public def getReportDataAsync( params ) {
		return getReportData(params);
	}

	@ProxyMethod
	public def getReportData( params ) {
		//def startdate = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.startdate+""));
		//def enddate = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.enddate+""))

		def startdate = dateFormat.format(parseDate(params.startdate));
		def enddate = dateFormat.format(parseDate(params.enddate));
		def xlist = em.getPostedCollectionsByStartdateAndEnddate(params);

		def otherreceipts = otherreceipt.getPostedCollectionByStardateAndEnddate(params);
		if (!xlist && !otherreceipts) throw new Exception("No collections on " + startdate + ".");
		//if (!xlist && !otherreceipts) throw new Exception("No collections from " + startdate + " TO " + enddate + ".");


		def mlist = [];
		mlist.addAll(xlist);
		mlist.unique{ it.txndate }

		def list = [];
		mlist?.each{ o->
			def i = list.find{ it.txndate == o.txndate }
			if (!i) {
				list << [txndate: o.txndate];
			}
		}

		mlist = [];
		mlist.addAll(otherreceipts);
		mlist.unique{ it.txndate }
		mlist?.each{ o->
			def i = list.find{ it.txndate == o.txndate }
			if (!i) {
				list << [txndate: o.txndate];
			}
		}
		list?.sort{ it.txndate }

		def items;
		list?.each{ o->
			o.item = [:];
			o.items = xlist?.findAll{ it.txndate == o.txndate };
			o.items?.sort{ it.route }
			if (!o.items) o.items = [];

			o.items?.each{ i->
				i.series = i.startseries.toString().padLeft(6, "0") + " - " + i.endseries.toString().padLeft(6, "0");
			}

			o.totalcollection = o.items?.amount?.sum();
			if (!o.totalcollection) o.totalcollection = 0;

			o.totaloverage = o.items?.overage?.sum();
			if (!o.totaloverage) o.totaloverage = 0;

			o.totalshortage = o.items?.shortage?.sum();
			if (!o.totalshortage) o.totalshortage = 0;

			o.totalcash = o.items?.totalcash?.sum();
			if (!o.totalcash) o.totalcash = 0;

			o.totalnoncash = o.items?.totalnoncash?.sum();
			if (!o.totalnoncash) o.totalnoncash = 0;

			//o.hasotherreceipt = false;
			o.otherreceipts = otherreceipts?.findAll{ it.txndate == o.txndate }

			o.totalorcollection = o.otherreceipts?.amount?.sum();
			if (!o.totalorcollection) o.totalorcollection = 0;

			o.totalorcash = o.otherreceipts?.totalcash?.sum();
			if (!o.totalorcash) o.totalorcash = 0;

			o.totalornoncash = o.otherreceipts?.totalnoncash?.sum();
			if (!o.totalornoncash) o.totalornoncash = 0;
			/*
			if (o.otherreceipts) {
				o.hasotherreceipt = true;
				o.otherreceipts?.sort{ it.dtcreated }

				if (!o.totalcollection) o.totalcollection = 0;
				o.totalcollection += o.otherreceipts?.amount?.sum();

				if (!o.totaloverage) o.totaloverage = 0;
				o.totaloverage += o.otherreceipts?.overage?.sum();

				if (!o.totalshortage) o.totalshortage = 0;
				o.totalshortage += o.otherreceipts?.shortage?.sum();

				if (!o.totalcash) o.totalcash = 0;
				o.totalcash += o.otherreceipts?.totalcash?.sum();

				if (!o.totalnoncash) o.totalnoncash = 0;
				o.totalnoncash += o.otherreceipts?.totalnoncash?.sum();

			}

			if (!o.totalcollection) o.totalcollection = 0;
			if (!o.totaloverage) o.totaloverage = 0;
			if (!o.totalshortage) o.totalshortage = 0;
			if (!o.totalcash) o.totalcash = 0;
			if (!o.totalnoncash) o.totalnoncash = 0;
			*/
		}

		/*
		def others;
		xlist.each{ o->
			//o.date = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a").format(o.txndate);
			o.series = o.startseries.toString().padLeft(6, "0") + " - " + o.endseries.toString().padLeft(6, "0");
			others = em.getOthers([objid: o.remittanceid])?.findAll{ it.txntype == 'OVERAGE' }
			if (others) {
				def amt = others.amount.sum();
				if (!amt) amt = 0;
				o.amount += amt;
			}
		}
		*/

		def branch = branchSvc.open([:]);
		def data = [
			date_period : startdate + " TO " + enddate,
			dtprinted	: new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a").format(dateSvc.serverDate),
			printedby 	: env.NAME,
			items		: list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}
		return data;
	}

	def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	@ProxyMethod
	public def getRoutes( params ) {

	}
}