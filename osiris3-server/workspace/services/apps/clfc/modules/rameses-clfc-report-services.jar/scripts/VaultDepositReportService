import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.text.SimpleDateFormat;

class VaultDepositReportService
{	
	@Env
	def env;

	@DataContext('deposit')
	def deposit_db;

	@DataContext('user')
	def user_db;

	@DataContext('depositslip')
	def depositslip_db;

	@ActiveDB("deposit")
	def em;

	@ActiveDB("user")
	def user;

	@ActiveDB('depositslip')
	def depositslip;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getReportData( params ) {
		params.txntype = 'vault';
		def txndate = new SimpleDateFormat("yyyy-MMM-dd").format(java.sql.Date.valueOf(params.txndate+""));
		def list = em.getByTxndateAndTxntype(params);
		if (!list) throw new Exception("No vault deposits for " + txndate + ".");

		def dateTimeFormat = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");
		def prepby;
		def rep;

		def mList = [];
		def item;
		list.each{ o->
			//prepby = user.read(o.author);
			prepby = user_db.find([ objid: o.author?.objid ]);
			if (prepby) {
				prepby = user.read([ objid: prepby.objid ]);
				o.preparedby_name = prepby.firstname + " " + prepby.lastname;
			}

			//rep = user.read(o.representative1);
			rep = user_db.find([ objid: o.representative1?.objid ]);
			if (rep) {
				rep = user.read([ objid: rep.objid ]);
				o.representative_name = rep.firstname + " " + rep.lastname;
			}

			//rep = user.read(o.representative2);
			rep = user_db.find([ objid: o.representative2?.objid ]).first();
			if (rep) {
				rep = user.read([ objid: rep.objid ]);
				representative2_name = rep.firstname + " " + rep.lastname;
			}

			o.time = dateTimeFormat.format(o.dtcreated);

			item = mList.find{ it.time == o.time };
			if (!item) {
				item = [ time: o.time ];
				mList.add(item);
			}
		}

		mList.each{ o->
			o.list = list.findAll{ it.time == o.time }
			o.list?.sort{ it.slipno }
			o.total = (o.list? o.list.amount.sum() : 0);
		}
		/*def item = em.findByTxndateAndTxntype(params);
		if (!item) throw new Exception("No vault deposits for " + txndate + ".");

		def list = em.getDetailsWithInfo(item);
		def rep1 = user.read(item.representative1);
		def rep2 = user.read(item.representative2);
		def author = user.read(item.author);*/

		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: txndate,
			dtprinted			: dateTimeFormat.format(dateSvc.serverDate),
			printedby 			: env.NAME,
			items				: mList
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		//println 'data ' + data;
		return data;
	}

	@ProxyMethod
	public def getReportDataByDepositid( params ) {
		//def item = em.read(params);
		def item = deposit_db.find([ objid: params.objid ]).first();
		if (!item) throw new RuntimeException('Deposit record does not exist or has already been deleted.');

		item = em.read([ objid: item.objid ]);

		//def rep = user.read(item.representative1);
		def rep = user_db.find([ objid: item.representative1?.objid ]).first();
		def representative1;
		if (rep) {
			rep = user.read([ objid: rep.objid ]);
			representative1 = rep.firstname + " " + rep.lastname;
		}

		//rep = user.read(item.representative2);
		rep = user_db.find([ objid: item.representative2?.objid ]).first();
		def representative2;
		if (rep) {
			rep = user.read([ objid: rep.objid ]);
			representative2 = rep.firstname + " " + rep.lastname;
		}

		//rep = user.read(item.author);
		rep = user_db.find([ objid: item.author?.objid ]).first();
		def preparedby;
		if (rep) {
			rep = user.read([ objid: rep.objid ]);
			preparedby = rep.firstname + " " + rep.lastname;
		}

		def items = em.getReportDataByDepositid([depositid: item.objid]);
		items?.each{ o->			
			o.cbs = em.getDepositSlipCBSReportDataByDepositSlipid([depositslipid: o.objid]);
			o.hascbs = (o.cbs? true : false);

			o.checks = em.getDepositSlipCheckReportDataByDepositSlipid([depositslipid: o.objid]);
			o.haschecks = (o.checks? true : false);
		}

		/*
		def items = xitems?.findAll{ it.isencashed==0 }
		def prevslipno;
		items?.each{ o->
			o.prevslipno = prevslipno;
			prevslipno = o.slipno;
		}
		*/
		def dateTimeFormat = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");
		def branch = branchSvc.open([:]);
		def data = [
			date_period 		: new SimpleDateFormat("yyyy-MMM-dd").format(item.txndate),
			dtprinted			: dateTimeFormat.format(dateSvc.serverDate),
			printedby 			: env.NAME,
			representative1_name: representative1,
			representative2_name: representative2,
			preparedby_name		: preparedby,
			items				: items
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		//println 'data ' + data;
		return data;
	}
}