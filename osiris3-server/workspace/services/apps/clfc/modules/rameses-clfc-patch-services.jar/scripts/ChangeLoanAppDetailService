import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class ChangeLoanAppDetailService
{
	@Env
	def env;

	@ActiveDB("loanapp")
	def loanapp;

	@ActiveDB("loanapp_detail")
	def loanapp_detail;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@ActiveDB("loan_product_type")
	def producttype;

	@ActiveDB("loan_route")
	def loan_route;

	@ActiveDB("loan_application")
	def loan_application;

	@ActiveDB("loanapp_borrower")
	def loanapp_borrower;

	@Service("DateService")
	def dateSvc;

	@Service("LoanLedgerService")
	def ledgerSvc;

	@Service("LoanTypeService")
	def loanTypeSvc;

	@ProxyMethod
	public def save( params ) {
		//println 'params-> ' + params;
		/*def prm = [
			objid 		: params.objid,
			appno		: params.appno,
			loanamount	: params.loanamount,
			borrowername: params.borrower.name,
			routecode 	: params.route.code
		];*/

		def pt = producttype.read(params.producttype);

		loanapp_detail.update(params, "loanapp");
		loanapp_detail.update([objid: params.objid, loanno: params.appno, dtreleased: params.dtreleased], "loanapp_capture");


		def search = loanapp.read([objid: params.objid], "loanapp_search");
		if (search) {
			search.fullborrowername = params.borrower.name;
			search.appno = params.appno;
			search.loanamount = params.loanamount;
			loanapp.update(search, "loanapp_search");


			loanapp.removeBorrowerIndicesWithNoBorrowerid([appid: params.objid]);

			def searchvalues = [params.appno, params.borrower.name]; 
			for (sval in searchvalues) {
				def o = [
					objid: 'IDX' + new UID(), 
					appid: params.objid, 
					searchtext: sval 
				];
				loanapp.create(o, 'loanapp_search_index'); 		
			} 
		}

		//throw new RuntimeException("stopping");

		//def app = loanapp.read([objid: params.objid]);
		def app = loanapp_detail.read([objid: params.objid], "loanapp");
		def ledger = loan_ledger.findByAppId([appid: params.objid]);


		if (ledger) {
			//def dtreleased = java.sql.Date.valueOf(params.dtreleased);
			def dtreleased = parseDate(params.dtreleased);

			ledger.acctname = params.borrower.name;
			//ledger.dailydue = ledgerSvc.computeDailyDue([loanamount: params.loanamount+"", term: pt?.term, interestrate: pt?.interestrate]);
			//ledger.dailydue = ledgerSvc.computeDailyDue([appid: params.objid]);
			//ledger.interestamount = ledgerSvc.computeInterestAmount([appid: params.objid]);
			//ledger.absentpenalty = ledgerSvc.computeAbsentPenalty([dailydue: ledger.dailydue, absentrate: pt?.absentpenalty]);
			def result = ledgerSvc.compute([appid: params.objid]);

			ledger.producttypeid = pt.name;
			ledger.term = pt.term;
			ledger.totalprincipal = params.loanamount;
			ledger.dtstarted = ledgerSvc.calculateStartDate(dtreleased, app?.loantype, pt);//dateSvc.add(dtreleased, "1");

			if (app.loantype == 'BUSINESS') {
				ledger.dailydue = result.dailydue;
				ledger.interestamount = result.interest;
				ledger.absentpenalty = result.absentpenalty;
				ledger.dtmatured = ledgerSvc.calculateMaturityDate(dtreleased, app?.loantype, pt);
			} else if (app.loantype == 'BRANCH') {
				ledger.dailydue = 0;
				ledger.interestamount = ledgerSvc.computeBranchLoanInterest(ledger);
				ledger.absentpenalty = 0;
				ledger.dtmatured = null;
			}
			//dateSvc.add(dtreleased, params.producttype.term+"");//dateSvc.parseDate(params.dtreleased, null).date;
				
			loanapp_detail.update(ledger, "ledger");


		}
		if (app) {
			loanapp_detail.removeChargesByAppid([appid: app.objid]);

			def lb = loanapp_borrower.findPrincipalBorrower([parentid: app.objid]);
			if (!lb) {
				lb = [
					objid: 		  'LB' + new UID(), 
					parentid: 	  app.objid, 
					borrowerid:   app.borrower.objid, 
					borrowername: app.borrower.name, 
					principalid:  app.borrower.objid,
					type:         'PRINCIPAL' 
				];
				loanapp_borrower.create(lb); 
			} else {
				lb = loanapp_borrower.read([objid: lb.lbid]);

				lb.borrowerid = app.borrower.objid;
				lb.borrowername = app.borrower.name;
				lb.principalid = lb.borrowerid;
				loanapp_borrower.update(lb);
			}

			def chrg;
			params?.charges?.each{ o->
				chrg = loanapp_detail.read([objid: o.objid], "charge");
				if (!chrg) {
					chrg = [
						objid 	: o.objid,
						appid 	: app.objid,
						acctid 	: o.acctid,
						title 	: o.title,
						amount 	: o.amount
					];
					loanapp_detail.create(chrg, "charge");
				} else {
					chrg.putAll(o);
					loanapp_detail.update(chrg, "charge");
				}
			}

			def ttlcharges = params.charges?.amount.sum();
			if (!ttlcharges) ttlcharges = 0;

			def netamount = app.loanamount - ttlcharges;

			def extinfo = loanapp_detail.read([objid: app.objid], "extinfo");
			if (!extinfo) {
				extinfo = [
					objid	 	: app.objid,
					netamount	: netamount,
					totalcharges: ttlcharges
				];
				loanapp_detail.create(extinfo, "extinfo");
			} else {
				extinfo.netamount = netamount;
				extinfo.totalcharges = ttlcharges;
				if (extinfo.assessmentinfo) {
					extinfo.assessmentinfo.charges = params.charges;
					extinfo.assessmentinfo.totalcharges = ttlcharges;
					extinfo.assessmentinfo.netamount = netamount;
				}
				loanapp_detail.update(extinfo, "extinfo");
			}

			def lapp = loan_application.read([objid: app?.objid]);
			if (lapp) {
				if (lapp.assessmentinfo) {
					lapp.assessmentinfo.charges = params.charges;
					lapp.assessmentinfo.totalcharges = ttlcharges;
					lapp.assessmentinfo.netamount = netamount;
				}
				loan_application.update(lapp);
			}
		}
		
		def item = [
			objid 		: "LOG" + new UID(),
			loanappid 	: params.objid,
			dtfiled 	: dateSvc.serverDate,
			author 		: [objid: env.USERID, name: env.NAME],
			remarks 	: params.remarks
		];
		loanapp_detail.create(item);

		return params;
	}

	@ProxyMethod
	public def getLoanTypes() {
		def list = loanTypeSvc.getList([:]);
		if (!list) return [];
		return list.collect{ it.name }
	}

	@ProxyMethod
	public def getAppTypes() {

	}

	private def parseDate( date ) {
		if (!date) return null;
		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	@ProxyMethod
	public def open( params ) {
		def data = loanapp_detail.read(params, 'loanapp');

		def cap = loanapp_detail.read(params, 'loanapp_capture');
		if (cap) data.dtreleased = cap.dtreleased;

		def pt = producttype.read(data.producttype);
		if (pt) data.producttype = pt;

		def r = loan_route.read(data.route);
		if (r) data.route = r;

		def charges = [];
		def app = loan_application.read([objid: data.objid]);
		if (app) {
			if (!app.assessmentinfo) app.assessmentinfo = [:];
			if (!app.assessmentinfo.charges) app.assessmentinfo.charges = [];
			charges = app.assessmentinfo.charges;
		}
		data.charges = charges;

		return data;
	}
}
