import com.rameses.annotations.*;
import java.text.*;
import java.rmi.server.UID;

class EditBranchLedgerPostingService
{
	@ActiveDB('edit_ledger_posting')
	def em;

	@ActiveDB('loan_ledger')
	def loan_ledger;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('loan_product_type')
	def loan_product_type;

	@ActiveDB('ledger_branchloan_posting')
	def ledger_branchloan_posting;

	@ActiveDB('calendar_event')
	def calendar_event;

	private def decFormat = new DecimalFormat('#,##0.00');
	private def dateFormat = new SimpleDateFormat('MMM-dd-yyyy');
	private def dateFormat2 = new SimpleDateFormat('yyyy-MM-dd');

	@ProxyMethod
	public def getLedgerInfo( params ) {
		def ledger = loan_ledger.read([objid: params?.ledger?.objid]);
		if (!ledger) throw new Exception('Ledger record does not exist or has already been deleted.');

		def pyts = getPayments(params);

		def data = [ledgerid: ledger?.objid, payments: pyts];
		return data;
	}

	@ProxyMethod
	public def getPaymentInfo( params ) {
		def pyt = loan_ledger.read([objid: params?.objid], 'payment');
		if (!pyt) throw new Exception('Ledger payment record does not exist or has already been deleted.');

		return pyt;
	}

	def getPayments( params ) {
		def list = em.getBranchPayment([objid: params?.refid]);
		list = addPaymentInfo(list);

		return list;
	}

	def addPaymentInfo( src ) {
		def list = [];
		src?.each{ o->
			def i = loan_ledger.read([objid: o?.objid], 'payment');
			def item = [
				objid	: o.objid,
				caption	: 'Date: ' + dateFormat.format(o.txndate) + ' Ref. No.: ' + o.refno + ' Amount: ' + decFormat.format(o.amount), 
				refno	: o.refno,
				amount 	: o.amount,
				txndate : o.txndate
			]
			list << item;
		}
		return list;
	}

	@ProxyMethod
	public def getColumns( params ) {
		def cols = []

		cols << [name: 'dtschedule', caption: 'Schedule of Payment', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'partialpayment', caption: 'Partial Payment', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'balance', caption: 'Balance', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'interest', caption: 'Interest Paid', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'penalty', caption: 'Penalty Charge', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'totalpayment', caption: 'Total Payment', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'refno', caption: 'OR No.'];
		cols << [name: 'dtpaid', caption: 'Date Paid', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'remarks', caption: 'Remarks'];

		return cols;
	}

	@ProxyMethod
	public def getDetail( params ) {
		def list = getDetailImpl(params);

		def xlist = list?.findAll{ it.paymentid == params?.payment?.objid }
		xlist?.each{ it.selected = true }

		return list;
	}

	@ProxyMethod
	public def getDetailByRefno( params ) {
		def pyt = loan_ledger.read([objid: params?.paymentid], 'payment');
		def list = getDetailImpl(params);
		list = list?.findAll{ it.paymentid == pyt?.objid }

		return list;
	}

	def getDetailImpl( params ) {
		def list = ledger_branchloan_posting.getPostingDetails([objid: params?.refid]);
		def info;
		list?.each{ o->
			info = o.remove('info');
			info = ledger_branchloan_posting.serializer.read(info);
			o.putAll(info);
		}

		return list;
	}

	@ProxyMethod
	public def removeLedgerDetail( params ) {
		def pyt = loan_ledger.read([objid: params?.paymentid], 'payment');

		def item = ledger_branchloan_posting.read([objid: params?.objid], 'posting-detail');
		if (item) {
			if (item.interest && pyt?.totalinterest) {
				pyt.totalinterest -= item.interest;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'INTEREST', date: pyt?.txndate]);
				if (rev) {
					rev.amount -= item.interest;
					loan_ledger.update(rev, 'revenue');
				}
			}

			if (item.penalty && pyt?.totalpenalty) {
				pyt.totalpenalty -= item.penalty;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'PENALTY', date: pyt?.txndate]);
				if (rev) {
					rev.amount -= item.penalty;
					loan_ledger.update(rev, 'revenue');
				}
			}

			if (item.lackinginterest && pyt?.lastitem?.lackinginterest) {
				pyt.lastitem.lackinginterest -= item.lackinginterest;
			}

			if (item.lackingpenalty && pyt?.lastitem?.lackingpenalty) {
				pyt.lastitem.lackingpenalty -= item.lackingpenalty;
			}
			loan_ledger.update(pyt, 'payment');
			ledger_branchloan_posting.delete(item, 'posting-detail');
		}

		if (pyt?.lastdtschedule) {
			def cal = Calendar.getInstance();
			cal.setTime(parseDate(pyt?.lastdtschedule));

			def type = getPaymentSchedule(pyt?.parentid)
			switch (type) {
				case 'ANNUAL' 	: cal.add(Calendar.YEAR, 1); break;
				case 'MONTHLY'	: cal.add(Calendar.MONTH, 1); break;
				case 'DAILY' 	: cal.add(Calendar.DATE, 1); break
			}
			pyt.lastdtschedule = parseDate(dateFormat2.format(cal.getTime()));
			loan_ledger.update(pyt, 'payment');

			def list = getPayments([refid: pyt?.parentid]);
			list = list?.findAll{ (String.valueOf(it.txndate) + '' + it.refno) > String.valueOf(pyt?.txndate) + '' + pyt?.refno }
			list?.each{ o->
				def i = loan_ledger.read([objid: o?.objid], 'payment');
				cal.setTime(parseDate(i?.lastdtschedule));

				switch (type) {
					case 'ANNUAL' 	: cal.add(Calendar.YEAR, 1); break;
					case 'MONTHLY'	: cal.add(Calendar.MONTH, 1); break;
					case 'DAILY' 	: cal.add(Calendar.DATE, 1); break
				}

				i.lastdtschedule = parseDate(dateFormat2.format(cal.getTime()));
				loan_ledger.update(i, 'payment');
			}
		}
	}

	@ProxyMethod
	public def saveLedgerDetail( params ) {
		def pyt = loan_ledger.read([objid: params?.paymentid], 'payment');

		def item = ledger_branchloan_posting.read([objid: params?.objid], 'posting-detail');
		if (!item) {
			item = [
				objid			: params?.objid, 
				parentid		: params?.refid,
				paymentid 		: pyt?.objid,
				idx 			: 0,
				sequenceno 		: String.valueOf(pyt?.txndate) + '' + pyt?.refno,
				dtschedule		: params?.dtschedule,
				partialpayment 	: params?.partialpayment,
				balance 		: params?.balance,
				interest 		: params?.interest,
				penalty 		: params?.penalty,
				totalpayment 	: params?.totalpayment,
				refno 			: params?.refno,
				dtpaid 			: params?.dtpaid,
				lackinginterest : params?.lackinginterest,
				lackingpenalty 	: params?.lackingpenalty
			];

			if (!checkIfNull(item.interest)) {
				if (!pyt?.totalinterest) pyt.totalinterest = 0;
				pyt.totalinterest += item.interest;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'INTEREST', date: pyt?.txndate]);
				if (rev) {
					rev.amount += item.interest;
					loan_ledger.update(rev, 'revenue');
				} else if(!rev) {
					rev = [
						objid		: 'LLR' + new UID(),
						parentid  	: pyt?.parentid,
						txndate 	: pyt?.txndate,
						tag 		: 'INTEREST',
						amount 		: item.interest
					];
					loan_ledger.create(rev, 'revenue');
				}
			}

			if (!checkIfNull(item.penalty)) {
				if (!pyt?.totalpenalty) pyt.totalpenalty = 0;
				pyt.totalpenalty += item.penalty;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'PENALTY', date: pyt?.txndate]);
				if (rev) {
					rev.amount += item.penalty;
					loan_ledger.update(rev, 'revenue');
				} else if (!rev) {
					rev = [
						objid		: 'LLR' + new UID(),
						parentid  	: pyt?.parentid,
						txndate 	: pyt?.txndate,
						tag 		: 'PENALTY',
						amount 		: item.penalty
					];
					loan_ledger.create(rev, 'revenue');
				}
			}

			if (!checkIfNull(item.lackinginterest)) {
				if (!pyt?.lastitem) pyt.lastitem = [:];
				if (!pyt?.lastitem?.lackinginterest) pyt.lastitem.lackinginterest = 0;
				pyt.lastitem.lackinginterest += item.lackinginterest;
			}
			
			if (!checkIfNull(item.lackingpenalty)) {
				if (!pyt?.lastitem) pyt.lastitem = [:];
				if (!pyt?.lastitem?.lackingpenalty) pyt.lastitem.lackingpenalty = 0;
				pyt.lastitem.lackingpenalty += item.lackingpenalty;
			}

			def xitm = ledger_branchloan_posting.findLastPageIndexByPaymentid([objid: item?.parentid, paymentid: item?.paymentid]);
			if (xitm) item.idx = xitm?.ledgercount;

			item.remarks = '';
			item.remarks += addLackingInterestRemarks(item?.lackinginterest);
			item.remarks += addLackingPenaltyRemarks(item?.lackingpenalty);
			item.remarks += addSundayRemarks(item.dtschedule);
			item.remarks += addHolidayRemarks(item.dtschedule);

			ledger_branchloan_posting.create(item, 'posting-detail');

			def cal = Calendar.getInstance();
			cal.setTime(parseDate(pyt?.lastdtschedule));

			def type = getPaymentSchedule(pyt?.parentid)
			switch (type) {
				case 'ANNUAL' 	: cal.add(Calendar.YEAR, 1); break;
				case 'MONTHLY'	: cal.add(Calendar.MONTH, 1); break;
				case 'DAILY' 	: cal.add(Calendar.DATE, 1); break
			}
			pyt.lastdtschedule = parseDate(dateFormat2.format(cal.getTime()));
			loan_ledger.update(pyt, 'payment');

			def list = getPayments([refid: pyt?.parentid]);
			list = list?.findAll{ (String.valueOf(it.txndate) + '' + it.refno) > String.valueOf(pyt?.txndate) + '' + pyt?.refno }
			list?.each{ o->
				def i = loan_ledger.read([objid: o?.objid], 'payment');
				cal.setTime(parseDate(i?.lastdtschedule));

				switch (type) {
					case 'ANNUAL' 	: cal.add(Calendar.YEAR, 1); break;
					case 'MONTHLY'	: cal.add(Calendar.MONTH, 1); break;
					case 'DAILY' 	: cal.add(Calendar.DATE, 1); break
				}

				i.lastdtschedule = parseDate(dateFormat2.format(cal.getTime()));
				loan_ledger.update(i, 'payment');
			}
		} else if (item) {
			item.dtschedule = params.dtschedule;
			item.partialpayment = params.partialpayment;
			item.balance = params.balance;

			if (!pyt?.totalinterest) pyt.totalinterest = 0;
			if (!checkIfNull(item.interest)) {
				if (pyt?.totalinterest) pyt.totalinterest -= item.interest;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'INTEREST', date: pyt?.txndate]);
				if (rev) {
					rev.amount -= item.interest;
					loan_ledger.update(rev, 'revenue');
				}
			}
			item.interest = params.interest;

			if (!checkIfNull(item.interest)) {
				pyt.totalinterest += item.interest;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'INTEREST', date: pyt?.txndate]);
				if (rev) {
					rev.amount += item.interest;
					loan_ledger.update(rev, 'revenue');
				} else if (!rev) {
					rev = [
						objid		: 'LLR' + new UID(),
						parentid  	: pyt?.parentid,
						txndate 	: pyt?.txndate,
						tag 		: 'INTEREST',
						amount 		: item.interest
					];
					loan_ledger.create(rev, 'revenue');
				}
			}

			if (!pyt?.totalpenalty) pyt.totalpenalty = 0;
			if (!checkIfNull(item.penalty)) {
				if (pyt?.totalpenalty) pyt?.totalpenalty -= item.penalty;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'PENALTY', date: pyt?.txndate]);
				if (rev) {
					rev.amount -= item.penalty;
					loan_ledger.update(rev, 'revenue');
				}
			}
			item.penalty = params.penalty;

			if (!checkIfNull(item.penalty)) {
				pyt.totalpenalty += item.penalty;
				def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'PENALTY', date: pyt?.txndate]);
				if (rev) {
					rev.amount += item.penalty;
					loan_ledger.update(rev, 'revenue');
				} else if (!rev) {
					rev = [
						objid		: 'LLR' + new UID(),
						parentid  	: pyt?.parentid,
						txndate 	: pyt?.txndate,
						tag 		: 'INTEREST',
						amount 		: item.penalty
					];
					loan_ledger.create(rev, 'revenue');
				}
			}
			item.totalpayment = params.totalpayment;
			item.refno = params.refno;
			item.dtpaid = params.dtpaid;

			if (!checkIfNull(item.lackinginterest) && pyt?.lastitem?.lackinginterest) {
				pyt.lastitem.lackinginterest -= item.lackinginterest;
			}
			item.lackinginterest = params.lackinginterest;

			if (!checkIfNull(item.lackinginterest)) {
				item.lackinginterest = params.lackinginterest;
				if (!pyt?.lastitem) pyt.lastitem = [:];
				if (!pyt?.lastitem?.lackinginterest) pyt.lastitem.lackinginterest = 0;
				pyt.lastitem.lackinginterest += item.lackinginterest;
			}

			if (!checkIfNull(item.lackingpenalty) && pyt?.lastitem?.lackingpenalty) {
				pyt.lastitem.lackingpenalty -= item.lackingpenalty;
			}
			item.lackingpenalty = params.lackingpenalty;

			if (!checkIfNull(item.lackingpenalty)) {
				if (!pyt?.lastitem) pyt.lastitem = [:];
				if (!pyt?.lastitem?.lackingpenalty) pyt.lastitem.lackingpenalty = 0;
				pyt.lastitem.lackingpenalty += item.lackingpenalty;
			}
			item.remarks = '';
			item.remarks += addLackingInterestRemarks(item?.lackinginterest);
			item.remarks += addLackingPenaltyRemarks(item?.lackingpenalty);
			item.remarks += addSundayRemarks(item.dtschedule);
			item.remarks += addHolidayRemarks(item.dtschedule);
			ledger_branchloan_posting.update(item, 'posting-detail');
		}
		loan_ledger.update(pyt, 'payment');
	}

	def addSundayRemarks( date ) {
		def rem = '';

		if (date) {
			def cal = Calendar.getInstance();
			cal.setTime(parseDate(date));

			if (cal.get(Calendar.DAY_OF_WEEK) == 1) {
				rem = 'Sunday\n';
			}
		}

		return rem;
	}

	def addHolidayRemarks( date ) {
		def rem = '';

		def evt = calendar_event.findByDate([date: date]);
		if (evt) rem = evt.name + '\n';

		return rem;
	}

	def addLackingInterestRemarks( lackinginterest ) {
		def rem = '';
		if (lackinginterest != null && lackinginterest > 0) {
			rem += 'lacking interest: ' + lackinginterest + ' \n';
		}
		return rem;
	}

	def addLackingPenaltyRemarks( lackingpenalty ) {
		def rem = '';
		if (lackingpenalty != null && lackingpenalty > 0) {
			rem += 'lacking penalty: ' + lackingpenalty + ' \n';
		}
		return rem;
	}

	def getPaymentSchedule( ledgerid ) {
		def ledger = loan_ledger.read([objid: ledgerid]);
		def app = loanapp.read([objid: ledger?.appid]);
		def pt = loan_product_type.read([name: app?.producttype?.name]);
		return pt?.paymentschedule;
	}

	def checkIfNull( data ) {
		if (data != null) return false;
		return true;
	}

	def parseDate( date ) {
		if (!date) return null;
		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}