import com.rameses.common.*;
import com.rameses.annotations.*;
import java.rmi.server.UID;
import java.text.SimpleDateFormat;

class LoanAppCaptureRenewService
{
	@ActiveDB("loan_application")
	def em;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('loan_product_type')
	def productType;	

	@ActiveDB('borrower')
	def borrower; 

	@ActiveDB('borrowerindividual')
	def borrowerindividual;

	@ActiveDB('borrowerjuridical')
	def borrowerjuridical;

	@ActiveDB('loanapp_borrower')
	def loanapp_borrower; 	

	@ActiveDB('loanapp_business')
	def loanapp_business; 

	@ActiveDB('loanapp_otherlending')
	def loanapp_otherlending; 	

	@ActiveDB('loanapp_collateral')
	def loanapp_collateral; 	

	@ActiveDB('customer')
	def customer;

	@ActiveDB('customerindividual')
	def customerindividual;

	@ActiveDB('customerjuridical')
	def customerjuridical;

	@ActiveDB("datatxnlog")
	def txnlog;

	@ActiveDB("var")
	def var;

	@Service('DateService')
	def dateSvc;

	@Service('BranchService')
	def branchSvc;

	@Service("LoanTypeService")
	def loanTypeSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service('LoanAppAssessmentService')
	def appAssessmentSvc;

	@Env 
	def env;

	private def DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

	@ProxyMethod
	public def initEntity( params ) {
		params.objid = params.preventityid;
		def entity = loanapp.findByObjid( params ); 
		if (!entity) throw new Exception("'"+params.objid+"' loan application not found"); 

		entity.version = 1;
		def captureinfo = loanapp.read(entity, "loanapp_capture");
		if (captureinfo) entity.version = captureinfo.version;

		entity.version++;
		entity.loancount = entity.version;
		entity.loanno = entity.appno;
		entity.prevloanid = entity.objid;

		entity.objid = 'LOAN' + new UID();
		checkOnProcessApplication([objid: entity.objid, borrowerid: entity.borrower.objid]);

		def pb = borrower.findByObjid([objid: entity.borrower?.objid]);
		if (pb) {
			def cust = customer.read([objid: pb?.objid]);

			pb.name = cust?.name;
			pb.address = cust?.address?.text;
			borrower.update(pb);

			switch (pb.type) {
				case 'INDIVIDUAL'	: updateIndividual(pb); break;
				case 'JURIDICAL'	: updateJuridical(pb); break;
			}

			pb = borrower.findByObjid([objid: pb?.objid]);
		}
		
		entity.borrower = pb;
		entity.apptype = 'RENEW';
		entity.objid = 'LOAN' + new UID();
		entity.prevloanid =  params.preventityid;
		entity.appmode = 'CAPTURE';
		entity.txnstate = 'DRAFT';

		if (!entity.borrower) entity.borrower = [:];
		if (!entity.producttype) entity.producttype = [:];
		if (!entity.branch) entity.branch = [:];
		if (!entity.approval) entity.approval = [:];

		if (!entity.borrower?.name) {
			def name = new StringBuffer(entity.borrower.lastname + ', ' + entity.borrower.firstname);
			if (entity.borrower.middlename) name.append(' ' + entity.borrower.middlename);

			entity.borrower.name = name.toString(); 
		}

		entity.producttype = productType.read([name: entity.producttype.name]);
		return entity; 
	}

	private def getUser() {
		return [objid: env.USERID, name: env.NAME];
	}

	void checkOnProcessApplication( params )  {
		def i = em.findProcessedApplicationByBorrowerid(params);
		if (i) throw new RuntimeException("There is already an application processed for this borrower.");
	}

	private void validate( data ) {
		//def i = em.findOnProcessApplicationByBorrowerid([borrowerid: data.borrower.objid, objid: data.objid]);
		checkOnProcessApplication([borrowerid: data.borrower.objid, objid: data.objid]);

		if (data.clienttype=='MARKETED' && !data.marketedby) {
			throw new RuntimeException("Please specify marketed by.");
		}
	}

	@ProxyMethod
	public def create( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = getUser();

		if (!data.txnmode) data.txnmode = 'CAPTURE';
		if (!data.txntype) data.txntype = 'RENEW';

		data.dtmatured = generateMaturityDate(data);

		em.create(data); 
		/*
		em.create(data, 'loanapp_capture'); 
		em.create(data, 'loanapp_capture_open');
		*/


		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txnid   : data.objid, 
			txndate : data.dtcreated, 			
			user    : [objid: env.USERID, username: env.USER], 
			action	: 'Renew', 
			remarks : 'CAPTURED LOAN TRANSACTION #'+data.appno 
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}

	@ProxyMethod
	public def update( data ) {
		validate(data);

		data.dtmatured = generateMaturityDate(data);
		em.update(data);

		return open(data);
	}

	@ProxyMethod
	public def open( params ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Loan Application record does not exist or has already been deleted.");

		println 'product type ' + data.producttype;

		return data;
	}
	@ProxyMethod
	public def assess( params ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Loan application record does not exist or has already been deleted.");


		def oc = data.assessmentinfo?.charges?.findAll{ it.allowDelete==true };
		if (!oc) oc = [];

		def info = appAssessmentSvc.getAssessmentInfo(data, [:]);
		if (!info.charges) info.charges = [];
		info.charges.addAll(oc);
		data.assessmentinfo  = info;
		em.update(data);

		return info
	}

	@ProxyMethod
	public def saveCharges( params ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Loan application record does not exist or has already been deleted.");

		if (!data.assessmentinfo) data.assessmentinfo = [charges: []];
		data.assessmentinfo.charges << params.charge;
		em.update(data);

		return data.assessmentinfo.charges;
	}

	@ProxyMethod
	public def removeCharges( params ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Loan application record does not exist or has already been deleted.");

		data.assessmentinfo.charges = params.charges;
		em.update(data);

		return data.assessmentinfo.charges;
	}

	@ProxyMethod
	public def submitForAssessment( params ) {
		def data = changeState(params, 'ASSESSMENT');

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		def msginfo = [
			objid		: data.objid,
			dtcreated 	: dateSvc.serverDate,
			refid 		: data.objid,
			filetype 	: 'loanapp:capture:renew',
			message 	: 'Assessment for Loan Application (' + data.appno + ')',
			senderid 	: env.USERID,
			sendername 	: env.NAME,
			recipientid : 'ASSESSOR'
		];
		inboxSvc.addMessage( msginfo );

		return open(data);
	}

	@ProxyMethod
	public def returnFromAssessment( params ) {
		def data = changeState(params, 'DRAFT');
		if (data.assessmentinfo) {
			data.assessmentinfo = [:];
			em.update(data);
		}
		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		/*
		def msginfo = [
			objid		: params.objid,
			dtcreated 	: params.dtfiled,
			refid 		: params.objid,
			filetype 	: 'loanapp:capture',
			message 	: 'Return from assessment Loan Application (' + data.appno + ')',
			senderid 	: params.author.objid,
			sendername 	: params.author.name,
			recipientid : 'CAO_OFFICER'
		];
		inboxSvc.addMessage( msginfo );
		*/

		return open(data);
	}

	@ProxyMethod
	public def submitForVerification( params ) {
		def data  = changeState(params, 'FOR_VERIFICATION');
		
		def sysvar = var.read([name: 'validate_application_charges']);
		if (sysvar?.value == "true") {
			if (data.loantype != 'BRANCH') {
				if (!data.assessmentinfo || !data.assessmentinfo.charges) {
					throw new RuntimeException("Please assess document before proceeding.");
				}
			}
		}

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		def msginfo = [
			objid		: data.objid,
			dtcreated 	: dateSvc.serverDate,
			refid 		: data.objid,
			filetype 	: 'loanapp:capture:renew',
			message 	: 'Submit for verification Loan Application (' + data.appno + ')',
			senderid 	: env.USERID,
			sendername 	: env.NAME,
			recipientid : 'APPROVER'
		];
		inboxSvc.addMessage( msginfo );

		return open(data);
	}

	@ProxyMethod
	public def returnFromForVerification( params ) {
		def data = changeState(params, 'ASSESSMENT');

		inboxSvc.removeMessageByRefid([refid: data.objid]); 

		def msginfo = [
			objid		: data.objid,
			dtcreated 	: dateSvc.serverDate,
			refid 		: data.objid,
			filetype 	: 'loanapp:capture:renew',
			message 	: 'Return from for verification Loan Application (' + data.appno + ')',
			senderid 	: env.USERID,
			sendername 	: env.NAME,
			recipientid : 'CAO_OFFICER'
		];
		inboxSvc.addMessage( msginfo );

		return open(data);
	}

	@ProxyMethod
	public def verify( params ) {
		def data = changeState(params, 'RELEASED');

		def serverdate = dateSvc.serverDate;

		data.dtposted = serverdate;
		data.postedby = getUser();
		em.update(data, 'post');

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		def prevapp = loanapp.read([objid: data.prevloanid]); 
		if (!prevapp) throw new Exception("'"+data.prevloanid+"' loan application not found"); 

		prevapp.state = 'CLOSED';
		loanapp.update([objid: prevapp.objid, state: prevapp.state]);
		loanapp.removeSearchIndex([objid: prevapp.objid]);
		loanapp.removeBorrowerIndices([appid: prevapp.objid]);

		def closelog = [
			objid:    'LOG' + new UID(), 
			appid: 	  prevapp.objid, 
			dtposted: serverdate, 
			postedby: env.USER,  
			remarks:  'APPLICATION CLOSED DUE TO RENEWAL, REFER TO APPNO#'+data.loanno 
		];
		loanapp.create(closelog, 'loanapp_log'); 	

		def branch = branchSvc.open([:]);
		
		def app = [
			objid 			: data.objid,
			state 			: data.txnstate,
			appno 			: data.appno,
			apptype 		: data.apptype,
			appmode 		: data.txnmode,
			dtcreated 		: serverdate,
			createdby 		: env.NAME,
			loanamount 		: data.amount,
			branch 			: [code: branch.code, name: branch.name],
			borrower 		: data.borrower,
			producttype 	: data.producttype,
			route 			: data.route,
			loantype 		: data.loantype,
			purpose 		: data.purpose,
			approval 		: [amount: data.amount],
			version 		: data.loancount,
			loanno 			: data.appno,
			clienttype 		: data.clienttype,
			marketedby 		: data.marketedby,
			dtreleased 		: data.dtreleased,
			dtfiled 		: serverdate
		];

		loanapp.create(app); 
		loanapp.create(app, 'loanapp_capture'); 
		loanapp.create(app, 'loanapp_capture_open'); 

		def assessment = data.assessmentinfo;
		if (!assessment) assessment = [:];

		def extinfo = [
			objid 			: data.objid,
			netamount 		: assessment?.netamount? assessment.netamount : 0,
			totalcharges 	: assessment?.totalcharges? assessment.totalcharges : 0,
			dtmatured 		: data.dtmatured,
			assessmentinfo 	: assessment
		];
		loanapp.create(extinfo, "extinfo");

		def chrg;
		assessment?.charges?.each{ o->
			chrg = loanapp.read([objid: o.objid], "charge");
			if (!chrg) {
				chrg = [
					objid 	: o.objid,
					appid 	: app.objid,
					acctid 	: o.acctid,
					title 	: o.title,
					amount 	: o.amount
				];
				loanapp.create(chrg, "charge");
			} else {
				chrg.putAll(o);
				loanapp.update(chrg, "charge");
			}
		}

		buildSearchIndex(app);
		buildBorrower(app);
		buildBusiness(app);
		buildOtherLending(app);
		buildCollateral(app);

		def log = [
			objid:    'LOG' + new UID(), 
			appid: 	  data.objid, 
			dtposted: serverdate, 
			postedby: data.postedby.name, 
			remarks:  'CAPTURED LOAN TRANSACTION #'+data.appno 
		];
		loanapp.create(log, 'loanapp_log');

		return open(data);
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Loan Application record does not exist or has already been deleted.");

		if (data.txnstate == state) {
			throw new RuntimeException("Loan Application has alreadt been " + state);
		}

		data.txnstate = state;
		em.update(data);

		return open(data);
	}
	

	void updateIndividual( data ) {
		def pb = borrowerindividual.read([objid: data?.objid]);
		if (pb) {
			def cust = customerindividual.read([objid: pb?.objid]);

			pb.lastname = cust?.lastname;
			pb.firstname = cust?.firstname;
			pb.middlename = cust?.middlename;
			pb.gender = cust?.gender;
			pb.birthdate = cust?.birthdate;
			pb.citizenship = cust?.citizenship;
			pb.civilstatus = cust?.civilstatus;
			borrowerindividual.update(pb);

		}
	}

	void updateJuridical( data ) {

	}

	private def generateMaturityDate( data ) {
		def cal = Calendar.getInstance();
		cal.setTime(parseDate(data.dtreleased));

		if (data.loantype == 'BRANCH') {
			return null;
		} else {
			def producttype = productType.read([name: data.producttype.name]);
			def pschedule = producttype.paymentschedule;
			if (pschedule == 'DAILY') {
				cal.add(Calendar.DATE, producttype.term);
			} else if (pschedule == 'SEMIMONTHLY' || pschedule == 'MONTHLY') {
				if (pschedule == 'SEMIMONTHLY') {				
					def xday = cal.get(Calendar.DATE);
					if ((xday >= 1 && xday <= 5) || (xday >= 16 && xday <= 20)) {
						if (xday > 15) {
							cal.set(Calendar.DATE, 15);
						} else if (xday < 6) {
							cal.set(Calendar.DATE, 1);
							cal.add(Calendar.DATE, -1);
						}
					} else {
						if (xday <= 15) {
							cal.set(Calendar.DATE, 15);
							//cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
						} else if (xday > 15) {
							cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
							//cal.add(Calendar.MONTH, 1);
							//cal.set(Calendar.DATE, 15);
						}
					}
				}

				double d = (producttype.term/30);
				cal.add(Calendar.MONTH, d.toInteger());
			} else {
				cal.add(Calendar.DATE, producttype.term);
			}
		}

		return parseDate(DATE_FORMAT.format(cal.getTime()));
	}

	private def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	@ProxyMethod
	public def getProductTypes() {
		def list = productType.getList([searchtext: '%']);
		//list.each{ it.title = it.name }
		return list;
	}

	@ProxyMethod
	public def getLoanTypes() {
		def list = loanTypeSvc.getList([:]);
		if (!list) return [];
		return list.collect{ it.name }
	}

	@ProxyMethod
	public def renew( data ) {
		if (!data.objid) throw new Exception('Please specify objid');
		if (!data.prevloanid) throw new Exception('Please specify prevloanid');

		def appinfo = loanapp.read([objid: data.prevloanid]); 
		if (!appinfo) throw new Exception("'"+data.prevloanid+"' loan application not found"); 

		if (appinfo.appmode != 'CAPTURE') throw new Exception('This facility is intended for captured loan applications only.');
		//if (appinfo.state != 'RELEASED') throw new Exception('Your loan application must be released first');		

		def captureinfo = loanapp.read([objid: appinfo.objid], 'loanapp_capture'); 
		if (!captureinfo) captureinfo = [version:0];

		if (data.clienttype == 'WALK-IN') {
			data.marketedby = null; 
		} else if (data.clienttype == 'MARKETED' && !data.marketedby) { 
			throw new Exception('Please specify marketedby'); 
		} 


		//close the previous loan application
		appinfo.state = 'CLOSED';
		loanapp.changeState([objid: appinfo.objid, state: appinfo.state]); 
		loanapp.removeSearchIndex([objid: appinfo.objid]);
		loanapp.removeBorrowerIndices([appid: appinfo.objid]);
		def closelog = [
			objid:    'LOG' + new UID(), 
			appid: 	  appinfo.objid, 
			dtposted: dateSvc.serverDate, 
			postedby: env.USER,  
			remarks:  'APPLICATION CLOSED DUE TO RENEWAL, REFER TO APPNO#'+data.loanno 
		];
		loanapp.create(closelog, 'loanapp_log'); 		


		data.branch = branchSvc.open([:]);
		data.dtfiled = dateSvc.serverDate.toString();		
		data.dtcreated = data.dtreleased.toString();
		data.createdby = env.USER; 
		
		data.state = 'RELEASED'; 
		data.version = captureinfo.version+1; 

		data.appno = data.loanno; 
		data.appmode = 'CAPTURE'; 
		data.approval = [amount: data.loanamount]; 

		loanapp.create(data); 
		loanapp.create(data, 'loanapp_capture'); 
		loanapp.create(data, 'loanapp_capture_open'); 

		def newlog = [
			objid:    'LOG' + new UID(), 
			appid: 	  data.objid, 
			dtposted: data.dtfiled, 
			postedby: data.createdby, 
			remarks:  'RENEW LOAN APPLICATION #'+data.appno+', PREVIOUS LOAN# '+appinfo.appno   
		];
		loanapp.create(newlog, 'loanapp_log'); 

		buildSearchIndex(data);
		buildBorrower(data);
		buildBusiness(data);
		buildOtherLending(data);
		buildCollateral(data);
		return data;
	}

	private void buildSearchIndex(data) { 
		if (!data.borrower.name) {
			def b = borrower.read([objid: data.borrower.objid]);
			if (b) data.borrower.name = b.name;
		}

		/*
		data.fullborrowername = data.borrower.name;//name.toString(); 
		data.dtposted = data.dtfiled;  
		data.postedby = data.createdby; 
		data.branchcode = data.branch.code; 
		data.branchname = data.branch.name; 
		data.routecode  = data.route?.code;
		loanapp.create(data, 'loanapp_search'); 
		*/
		def ls = loanapp.read([objid: data.objid], 'loanapp_search');
		if (!ls) {

			data.fullborrowername = data.borrower.name; 
			data.dtposted = data.dtcreated;  
			data.postedby = data.createdby; 
			data.branchcode = data.branch.code; 
			data.branchname = data.branch.name; 
			data.routecode  = data.route?.code;
			loanapp.create(data, 'loanapp_search'); 
		} else {
			//prevls.putAll(ls);

			ls.fullborrowername = data.borrower.name;
			ls.routecode = data.route?.code;
			loanapp.update(ls, 'loanapp_search');
		}

		def searchvalues = [data.appno, data.borrower.name]; 
		for (sval in searchvalues) {
			def o = [
				objid: 'IDX' + new UID(), 
				appid: data.objid, 
				searchtext: sval 
			];
			loanapp.create(o, 'loanapp_search_index'); 		
		} 
	} 	

	private void buildBorrower(data) { 
		def list = loanapp.getBorrowerList([parentid: data.prevloanid]);
		if (list) {
			list.each{o-> 
				o.objid = 'LB' + new UID(); 
				o.parentid = data.objid; 
				loanapp_borrower.create(o); 
			}
		} else {
			def lb = loanapp_borrower.findPrincipalBorrower([parentid: data.objid]);
			if (!lb) {
				lb = [
					objid: 		  'LB' + new UID(), 
					parentid: 	  data.objid, 
					borrowerid:   data.borrower.objid, 
					borrowername: data.borrower.name, 
					principalid:  data.borrower.objid,
					type:         'PRINCIPAL' 
				];
				loanapp_borrower.create(lb); 
			} else {
				lb = loanapp_borrower.read([objid: lb.lbid]);
				
				lb.borrowerid = data.borrower.objid;
				lb.borrowername = data.borrower.name;
				lb.principalid = lb.borrowerid;
				loanapp_borrower.update(lb);
			}
		}
	} 

	private void buildBusiness(data) { 
		loanapp.getBusinessList([parentid: data.prevloanid]).each{o-> 
			o.objid = 'LBU' + new UID(); 
			o.parentid = data.objid; 
			o.ci_physicaloutlook = null;
			o.ci_evaluation = null;	
			o.ci_timefiled = null; 
			o.ci_dtfiled = null; 
			o.ci_filedby = null; 
			o.ci_amount = 0.0; 
			loanapp_business.create(o); 
		} 
	} 	

	private void buildOtherLending(data) { 
		loanapp.getOtherLendingList([objid: data.prevloanid]).each{o-> 
			o.objid = 'LOL' + new UID(); 
			o.parentid = data.objid; 
			loanapp_otherlending.create(o); 
		} 
	} 	

	private void buildCollateral(data) { 
		loanapp.getCollateralApplianceList([parentid: data.prevloanid]).each{o-> 
			o.objid = 'LCA' + new UID(); 
			o.parentid = data.objid; 
			loanapp_collateral.create(o, 'appliance'); 
		} 
		loanapp.getCollateralVehicleList([parentid: data.prevloanid]).each{o-> 
			o.objid = 'LCV' + new UID(); 
			o.parentid = data.objid; 
			loanapp_collateral.create(o, 'vehicle'); 
		} 
		loanapp.getCollateralPropertyList([parentid: data.prevloanid]).each{o-> 
			o.objid = 'LCP' + new UID(); 
			o.parentid = data.objid; 
			loanapp_collateral.create(o, 'property'); 
		} 
		loanapp.getCollateralOtherList([objid: data.prevloanid]).each{o-> 
			o.objid = 'LCO' + new UID(); 
			o.parentid = data.objid; 
			loanapp_collateral.create(o, 'other'); 
		} 
	} 

	private String addLeadingChars(value, schar, length) {
		def buffer = new StringBuffer();
		def sval = (value == null? "": value.toString()); 
		def len = length-sval.length();
		for (int i=0; i<len; i++) {
			buffer.append(schar); 
		} 
		buffer.append(sval);
		return buffer.toString(); 
	} 

	/*
	@ProxyMethod 
	public def xopen( params ) { 
		def entity = loanapp.findByObjid( params ); 
		if (!entity) throw new Exception("'"+params.objid+"' loan application not found"); 

		def pb = borrower.findByObjid([objid: entity.borrower?.objid]);
		if (pb) {
			def cust = customer.read([objid: pb?.objid]);

			pb.name = cust?.name;
			pb.address = cust?.address?.text;
			borrower.update(pb);

			switch (pb.type) {
				case 'INDIVIDUAL'	: updateIndividual(pb); break;
				case 'JURIDICAL'	: updateJuridical(pb); break;
			}

			pb = borrower.findByObjid([objid: pb?.objid]);
		}
		
		entity.borrower = pb;
		entity.apptype = 'RENEW';
		entity.prevloanid =  entity.objid;
		entity.objid = 'LOAN' + new UID();

		if (!entity.borrower) entity.borrower = [:];
		if (!entity.producttype) entity.producttype = [:];
		if (!entity.branch) entity.branch = [:];
		if (!entity.approval) entity.approval = [:];

		if (!entity.borrower?.name) {
			def name = new StringBuffer(entity.borrower.lastname + ', ' + entity.borrower.firstname);
			if (entity.borrower.middlename) name.append(' ' + entity.borrower.middlename);

			entity.borrower.name = name.toString(); 
		}

		return entity; 
	}
	*/
}