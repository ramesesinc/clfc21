import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class CaptureLoanLedgerProceedsService extends ActiveCrudService
{
	@Env
	def env;

	@ActiveDB("loan_ledger_proceeds")
	def em;

	@ActiveDB("loan_ledger")
	def ledger;

	@ActiveDB("loanapp")
	def loanapp;

	@ActiveDB("borrower")
	def borrower;

	@ActiveDB('loan_ledger_payment')
	def ledger_payment;

	@Service("DateService")
	def dateSvc;

	@Service("LoanLedgerPaymentService")
	def ledgerPaymentSvc;

	@Service("CLFCUtilService")
	def clfcUtilSvc;

	private void validate( data ) {
		def currentdate = dateSvc.getServerDateAsString().split(" ")[0];
		def txndate = data.txndate+"";
		if (txndate.compareTo(currentdate) >= 0)
			throw new Exception("Txndate must be less than current date.");
	}

	void beforeCreate( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
		if (!data.txntype) data.txntype = 'CAPTURE';
	}

	void beforeUpdate( data ) {
		validate(data);
	}

	@ProxyMethod
	public def getInfo( params ) {
		if (!params.ledgerid) throw new RuntimeException("Please specify ledgerid.");

		def mledger = ledger.read( [objid: params.ledgerid] );
		if (!mledger) throw new RuntimeException("Ledger record does not exist or has already been deleted.");

		def app = loanapp.read( [objid: mledger.appid] );
		if (!app) throw new RuntimeException("Loan Application record does not exist or has already been deleted.");

		def pb = borrower.read( [objid: app.borrower.objid] );
		if (!pb) throw new RuntimeException("Borrower record does not exist or has already been deleted.");

		return [borrower: pb];
	}

	@ProxyMethod
	public def saveCapturedProceed( data ) {
		data = create( data );
		data = sold( data );

		return open( data );
	}

	@Async
	@ProxyMethod
	public def sold( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Proceed record does not exist or has already been deleted.");

		if (data.txnstate == 'SOLD') throw new Exception("Proceed already sold.");
		data.txnstate = 'SOLD';
		em.changeState(data);
		
		data.refid = 'LLP' + new UID();

		def item = ledger.read([objid: data.refid], "payment");
		if (!item) {
			item = [
				objid		: data.refid,
				parentid	: data.parentid,
				refno 		: data.refno,
				txndate 	: data.txndate,
				amount 		: data.amount,
				isonline	: 1,
				dtmodified 	: dateSvc.serverDate,
				modifiedby	: [objid: env.USERID, name: env.NAME]
			];
			ledger.create(item, "payment");
		}

		data.dtsold = data.txndate;
		data.soldby = [objid: env.USERID, name: env.NAME];
		//println 'data ' + data;
		em.update(data, "proceeds-sold");

		/*
		def l = ledger.read([objid: data.parentid]);
		if (!l) throw new Exception("Ledger record does not exist or has already been deleted.");

		l.payments = ledger_payment.getList(l);
		l.payments.each{ o->
			if (o.info) {
				def info = o.remove("info");
				info = ledger_payment.serializer.read( info );
				o = clfcUtilSvc.resolveMapMerging( o, info );
			}
			//info = null;
			//if (o.info) info = ledger_payment.serializer.read(o.info);
			//if (info) o.putAll(info);
		}
		ledgerPaymentSvc.rebuild(l);
		*/

		return open(data);
	}
}