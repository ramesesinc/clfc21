import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class LoanAppCollateralService {

	@ActiveDB(value='loanapp')
	def loanapp;

	@ActiveDB(value='loanapp_collateral')
	def collateral;

	@DataContext('loanapplication_collateral_appliance')
	def appliance_db;

	@DataContext('loanapplication_collateral_vehicle')
	def vehicle_db;

	@DataContext('loanapplication_collateral_property')
	def property_db;

	@DataContext('loanapplication_collateral_other')
	def other_db;

	@DataContext('loanapp_cireport')
	def cireport_db;

	@Service('DateService') 
	def dateSvc; 

	@Env 
	def env; 

	@ProxyMethod 
	public def open( params ) { 
		if (!params.objid) throw new Exception('Please specify objid'); 

		def data = loanapp.findByObjid(params);
		if (!data) throw new Exception("'"+ params.objid+ "' loan application record not found"); 

		data.collateral = [:]; 
		data.collateral.appliances = appliance_db.find([ parentid: data.objid ]).list(); 
		data.collateral.vehicles = vehicle_db.find([ parentid: data.objid ]).list(); 
		data.collateral.properties = property_db.find([ parentid: data.objid ]).list(); 
		data.collateral.other = other_db.find([ objid: data.objid ]).first(); 

		loadCIReport( data ); 
		return data; 
	} 


	@ProxyMethod 
	public def update( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (!data) throw new Exception("'"+ params.objid +"' loan application record not found"); 

		data.collateral = params.remove('collateral');
		if (data.collateral == null) data.collateral = [:];
		if (data.collateral.appliances == null) data.collateral.appliances = [];
		if (data.collateral.vehicles == null) data.collateral.vehicles = [];
		if (data.collateral.properties == null) data.collateral.properties = [];

		def rundate = dateSvc.serverDate;

		collateral.removeAppliances([parentid: data.objid]); 
		cireport_db.find([ parentid: data.objid, reftype: 'appliance' ]).delete();
		for (o in data.collateral.appliances) {
			o.objid = 'COLLA' + new UID();
			o.parentid = data.objid;
			collateral.create(o, 'appliance');

			def ci = o.ci;
			if (ci) {
				ci.objid = o.objid;
				ci.parentid = data.objid;
				ci.refid = o.objid;
				ci.reftype = 'appliance';
				ci.dtfiled = rundate;
				ci.filedby = [objid: env.USERID, name: env.NAME];
				cireport_db.create( ci );
			}
		}

		collateral.removeVehicles([parentid: data.objid]);
		cireport_db.find([ parentid: data.objid, reftype: 'vehicle' ]).delete();
		for (o in data.collateral.vehicles) {
			o.objid = 'COLLV' + new UID();
			o.parentid = data.objid; 
			collateral.create(o, 'vehicle');

			def ci = o.ci;
			if (ci) {
				ci.objid = o.objid;
				ci.parentid = data.objid;
				ci.refid = o.objid;
				ci.reftype = 'vehicle';
				ci.dtfiled = rundate;
				ci.filedby = [objid: env.USERID, name: env.NAME];
				cireport_db.create( ci );
			}
		}

		collateral.removeProperties([parentid: data.objid]); 
		cireport_db.find([ parentid: data.objid, reftype: 'property' ]).delete();
		for (o in data.collateral.properties) {
			o.objid = 'COLLP' + new UID();
			o.parentid = data.objid;
			collateral.create(o, 'property');

			def ci = o.ci;
			if (ci) {
				ci.objid = o.objid;
				ci.parentid = data.objid;
				ci.refid = o.objid;
				ci.reftype = 'property';
				ci.dtfiled = rundate;
				ci.filedby = [objid: env.USERID, name: env.NAME];
				cireport_db.create( ci );
			}
		}

		collateral.removeOtherCollateral([objid: data.objid]);
		if (data.collateral.other?.remarks) { 
			data.collateral.other.objid = data.objid;
			collateral.create(data.collateral.other, 'other');

			def ci = data.collateral.other?.ci;
			if (ci) {
				ci.objid = data.objid;
				ci.parentid = data.objid;
				ci.refid = data.objid;
				ci.reftype = 'other';
				ci.dtfiled = rundate;
				ci.filedby = [objid: env.USERID, name: env.NAME];
				cireport_db.create( ci );
			}
		} 
		/*

		if ( data.collateral.ci ) {
			def cis = []; 
			if ( data.collateral.ci.appliance ) {
				data.collateral.ci.appliance.reftype = 'appliance'; 
				cis << data.collateral.ci.appliance; 
			}
			if ( data.collateral.ci.vehicle )  {
				data.collateral.ci.vehicle.reftype = 'vehicle'; 
				cis << data.collateral.ci.vehicle; 
			}
			if ( data.collateral.ci.property )  {
				data.collateral.ci.property.reftype = 'property'; 
				cis << data.collateral.ci.property; 
			}
			if ( data.collateral.ci.other )  {
				data.collateral.ci.other.reftype = 'other'; 
				cis << data.collateral.ci.other; 
			}

			cireport_db.find([ parentid: data.objid ]).delete(); 
			cis.each{ o-> 
				o.parentid = data.objid; 
				o.objid = o.parentid.toString() +'_'+ o.reftype;
				if ( o.dtfiled == null ) o.dtfiled = dateSvc.getServerDate(); 
				if ( o.filedby == null ) o.filedby = [:]; 
				if ( !o.filedby.objid ) {
					o.filedby.objid = env.USERID;
					o.filedby.name = env.FULLNAME; 
				}
				cireport_db.create( o );  
			}
		}
		*/

		loadCIReport( data ); 		
		return data; 
	} 

	private void loadCIReport( data ) {
		def cis = cireport_db.find([ parentid: data.objid ]).list();
		data.collateral.appliances?.each{ o->
			def ci = cis.find{ it.refid == o.objid }
			if (ci) o.ci = ci;
		}
		data.collateral.vehicles?.each{ o->
			def ci = cis.find{ it.refid == o.objid }
			if (ci) o.ci = ci;
		}
		data.collateral.properties?.each{ o->
			def ci = cis.find{ it.refid == o.objid }
			if (ci) o.ci = ci;
		}

		/*
		def ci = [:]; 
		def cis = cireport_db.find([ parentid: data.objid ]).list(); 
		ci.appliance = cis.find{ it.reftype == 'appliance' } 
		ci.vehicle = cis.find{ it.reftype == 'vehicle' } 
		ci.property = cis.find{ it.reftype == 'property' } 
		ci.other = cis.find{ it.reftype == 'other' } 
		data.collateral.ci = ci; 
		*/
	}
}
