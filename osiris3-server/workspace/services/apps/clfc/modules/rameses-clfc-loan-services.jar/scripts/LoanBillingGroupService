import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;
import com.rameses.rules.common.*;
import com.rameses.util.*;
import loan.facts.*;
import loan.actions.*;
import java.util.*;

class LoanBillingGroupService extends ActiveCrudListService
{
	@Env
	def env;

	@ActiveDB('specialcollection_billinggroup')
	def em;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@ActiveDB('loan_ledger')
	def loan_ledger;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('borrower')
	def borrower;

	@ActiveDB("customer")
	def customer;

	@ActiveDB("loan_ledger_payment")
	def loan_ledger_payment;

	@ActiveDB("loan_product_type")
	def product_type;

	@ActiveDB("specialcollection")
	def specialcollection;

	@ActiveDB("followupcollection")
	def followupcollection;

	@ActiveDB("ledger_billing")
	def ledger_billing;

	@ActiveDB("ledgeramnesty")
	def ledgeramnesty;

	@ActiveDB("ledgeramnesty_fix")
	def ledgeramnesty_fix;

	@ActiveDB("ledgeramnesty_waiver")
	def ledgeramnesty_waiver;

	@ActiveDB("ledgeramnesty_baddebt")
	def ledgeramnesty_baddebt;

	@ActiveDB("ledgeramnesty_smc")
	def ledgeramnesty_smc;

	@ActiveDB("loan_exemption")
	def exemption;

	@Service('DateService')
	def dateSvc;

	@Service('InboxService')
	def inboxSvc;

	@Service("NumberService")
	def numSvc;

	@Service("LoanLedgerBillingService")
	def billingSvc;

	@Service("CalendarEventService")
	def calendarSvc;

	@Service("LoanLedgerService")
	def ledgerSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("BranchService")
	def branchSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: 'txnstate', caption: 'Status'];

		cols << [name: 'dtcreated', caption: 'Date Created'];
		cols << [name: 'author.name', caption: 'Created By'];
		cols << [name: 'name', caption: 'Group Name'];
		cols << [name: 'txntype', caption: 'Billing Type'];
		cols << [name: 'dtstarted', caption: 'Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		//cols << [name: 'dtended', caption: 'Date Ended', type: 'date', outputFormat: 'MMM-dd-yyyy'];

		/*
		if (params.state == 'APPROVED') {
			cols << [name: 'dtposted', caption: 'Date Approved'];
			cols << [name: 'poster.name', caption: 'Approved By'];

		} else if (params.state == 'DISAPPROVED') {
			cols << [name: 'dtposted', caption: 'Date Disapproved'];
			cols << [name: 'poster.name', caption: 'Disapproved By'];

		}
		*/

		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';
		if (params.state) {
			params._listMethod = 'getListByState';
		}
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			//[caption: 'DISAPPROVED', state: 'DISAPPROVED']
		];
	}

	@ProxyMethod
	public def getTypes() {
		return ['FOLLOWUP', 'SPECIAL'];
	}

	def parse( pattern, date ) {
		if (!pattern) pattern = 'yyyy-MM-dd';
		def dt = parseDate(date);
		return parseDate(new java.text.SimpleDateFormat(pattern).format(dt));
	}

	def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	void validate( data ) {
		def i = em.findBillingGroupByDateAndType([date: data.dtstarted, type: data.txntype, objid: data.objid]);
		if (i) {
			throw new RuntimeException("Already created billing for " + data.txntype + " dated " + data.dtstarted + ".");
		}
		
		def currdate = parseDate(dateSvc.getServerDateAsString().split(' ')[0]);
		def sd = parseDate(data?.dtstarted);

		if (sd.compareTo( currdate )  < 0) {
			throw new RuntimeException("Date must be greater than or equal to current date.");
		}

		/*
		def currdate = parseDate(dateSvc.getServerDateAsString().split(' ')[0]);
		def sd = parseDate(data?.dtstarted);
		def ed = parseDate(data?.dtended);

		if (sd.compareTo(currdate) < 0) {
			throw new Exception('Date started must be greater than or equal to current date.');
		}

		if (ed.compareTo(sd) < 0) {
			throw new Exception('Date ended must be greater than or equal to date started.');
		}
		*/

		if (!data?.items) {
			throw new Exception('At least 1 ledger for billing group is required.');
		}
	}

	void beforeCreate( data ) {
		validate( data );
		data.dtended = data.dtstarted;
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
	}

	void afterCreate( data ) {
		updateDetail(data);
	}

	void beforeUpdate( data ) {
		validate( data );
		data.dtended = data.dtstarted;
	}

	void afterUpdate( data ) {
		updateDetail(data);
	}

	private void updateDetail( data ) {
		data?._removedledgers?.each{ o->
			em.delete(o, 'bg-detail');
		}

		data?._addedledgers?.each{ o->
			em.create(o, 'bg-detail');
		}
	}

	void afterOpen( data ) {
		data.items = [];
		def items = em.getDetails(data);
		def item;
		items?.each{ o->
			item = addDetails( o );
			if (item) {
				data.items << item;
			}
		}
	}

	private def addDetails( item ) {
		def data = em.read(item, 'bg-detail');
		if (data) {
			def ledger = loan_ledger.read([objid: data.ledgerid]);
			def app = loanapp.read([objid: ledger?.appid]);
			def appc = loanapp.read([objid: app?.objid], 'loanapp_capture');

			def b = borrower.read([objid: data.borrower.objid]);
			if (b) {
				data.borrower.address = b.address;
				em.update(data, 'bg-detail');
			}

			if (!data.loanapp) {
				data.loanapp = [
					objid	: app?.objid,
					appno 	: app?.appno,
					amount	: app?.loanamount
				];
				em.update(data, 'bg-detail');
			}

			if (!data.ledger) {
				data.ledger = [
					objid		: ledger?.objid,
					dtreleased 	: appc?.dtreleased,
					dtmatured 	: ledger?.dtmatured
				];
				em.update(data, 'bg-detail');
			}

			data = em.read( data, "bg-detail" );
		}
		return data;
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeState(params, 'FOR_APPROVAL');

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'billinggroup', 
			message 	: 'For approval of billing group for ' + data.dtstarted + '.', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return open(data);
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Billing group record does not exist or has already been deleted.');

		if (data.txnstate == state) {
			throw new Exception('Billing group record has already been ' + state + '.');
		}

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state) {
			case 'DRAFT'		: action = "Draft";
								  remarks = "Submit to Draft";
								  break;
			case 'FOR_APPROVAL'	: action = 'For Approval';
								  remarks = 'Submitted Billing Group for Approval';
								  break;
			case 'APPROVED' 	: action = 'Approved';
								  remarks = 'Approved Billing Group';
								  break;
			case 'DISAPPROVED' 	: action = 'Disapproved';
								  remarks = 'Disapproved Billing Group';
								  break;
		}

		if (action && remarks) {
			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action, 
				remarks : remarks
			]; 
			txnlog.create( loginfo ); 
		}

		return open(data);
	}

	@Async
	@ProxyMethod
	public def asyncApproveDocument( params ) {
		return approveDocument( params );
	}

	@ProxyMethod
	public def approveDocument( params ) {
		def data = approveImpl(params, 'APPROVED');

		createSpecialCollection( data );
		createBilling( data );

		return open( data );
	}

	@ProxyMethod
	public def returnToDraft( params ) {
		def data = changeState( params, "DRAFT" );

		inboxSvc.removeMessageByRefid([refid: data.objid]);
		return open( data );
	}

	/*
	@ProxyMethod
	public def disapprove( params ) {
		return approveImpl(params, 'DISAPPROVED');
	}
	*/

	private def approveImpl( params, state ) {
		def data = changeState(params, state);

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, 'bg-post');

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	@ProxyMethod
	public def getDetailsWithLedgerInfo( params ) {
		return em.getDetailsWithLedgerInfo([objid: params.objid]);
	}

	@ProxyMethod
	public def getBillingGroupLedgers( params ) {
		def data = em.read( params );
		if (!data) throw new RuntimeException("Billing Group record does not exist or has already been deleted.");

		def list = [];
		em.getDetails(data)?.each{ o->
			def item = addDetails(o);
			if (item) {
				list << item;
			}
		}
		return list;
	}

	private void createSpecialCollection( data ) {
		def sc = specialcollection.read([objid: data.objid]);
		if (!sc) {
			sc = [
				objid 		: data.objid,
				state 		: 'FOR_DOWNLOAD',
				billingid 	: 'LB' + new UID(),
				txndate 	: data.dtstarted,
				txntype 	: 'ONLINE',
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				collector 	: data.collector
			];

			def list = specialcollection.getListByCollectoridAndDate([collectorid: sc.collector.objid, date: sc.txndate]);
			if (!list) list = [];
			sc.name = "Special " + (sc.size() + 1);

			specialcollection.create( sc );
		}
		//data.specialcollectionid = sc.objid;

		if (data.txntype == 'FOLLOWUP') {
			def list = followupcollection.getListByCollectoridAndDate([collectorid: sc.collector.objid, date: sc.txndate]);
			if (!list) list = [];
			sc.name = "Follow-up " + (list.size() + 1);
			specialcollection.update( sc );

			def fc = followupcollection.read([objid: data.objid]);
			if (!fc) followupcollection.create([objid: data.objid]);
		}

		def list = em.getDetails( data );
		list?.each{ o->
			def ledger = loan_ledger.read([objid: o.ledgerid]);
			if (!ledger) throw new Exception('Ledger record does not exist or has already been deleted.');

			def app = loanapp.read([objid: ledger.appid]);
			if (!app) throw new Exception('Loanapp record does not exist or has already been deleted.');

			def item = specialcollection.read([objid: o.objid], "sc-detail");
			if (!item) {
				item = [
					objid			: o.objid,
					parentid		: sc.objid,
					billingdetailid	: o.objid,
					routecode 		: app?.route?.code,
					borrower 		: app?.borrower,
					loanapp 		: [objid: app?.objid, appno: app?.appno]
				];
				specialcollection.create( item, "sc-detail" );
			} else {
				item.billingdetailid = o.objid;
				specialcollection.update( item, "sc-detail" );
			}

			/*
			item = [
				objid 			: o.scdetailid,
				parentid		: sc.objid,
				billingdetailid	: 'LSCD' + new UID(),
				routecode 		: app?.route?.code,
				borrower 		: app?.borrower,
				loanapp 		: [objid: app?.objid, appno: app?.appno],
			];

			def i = specialcollection.read([objid: o.scdetailid], 'sc-detail');
			if (!i) {
				specialcollection.create(item, 'sc-detail');
			} else {
				item.billingdetailid = i.billingdetailid;
				specialcollection.update(item, 'sc-detail');
			}
			*/
		}
	}


	private void createBilling( data ) {
		def sc = specialcollection.read([objid: data.objid]);
		if (!sc) throw new RuntimeException("Special collection record does not exist or has already been deleted.");

		def currdate = dateSvc.serverDate;
		def billing = ledger_billing.findByCollectorAndBilldate([collectorid: sc.collector.objid, date: sc.txndate]);
		if (!billing) {
			def branch = branchSvc.open([:]);

			billing = [
				objid 				: sc.billingid,
				dtcreated 			: currdate,
				author 				: [objid: env.USERID, name: env.NAME],
				collector 			: data.collector,
				billdate 			: sc.txndate,
				branchid 			: branch.code,
				totalfordownload 	: 0,
				totaldownloaded 	: 0,
				totalposted 		: 0,
			];
			ledger_billing.create( billing );
		}

		//data.fieldcollectionid = billing.objid;

		def item = ledger_billing.findByBillingidAndItemid([objid: billing?.objid, itemid: sc.objid]);
		if (!item) {
			item = [
				objid 		: sc.objid,
				parentid 	: billing?.objid,
				state 		: 'FOR_DOWNLOAD',
				dtmodified 	: currdate,
				modifiedby 	: [objid: env.USERID, name: env.NAME],
				item 		: [objid: sc.objid, type: 'special']
			];

			def fc = followupcollection.read([objid: sc.objid]);
			if (fc) item.item.type = 'followup';

			ledger_billing.create(item, "billing-item");

			billing.totalfordownload++;
			ledger_billing.update(billing);
		}

		def _page = 1, _start = 0, _limit = 10;
		def facts, details, xitem, size, detail, param, itm;

		def actions = new RuleAction(); 
		actions.addCommand( "calcInterest", new  CalculateBillingInterest(NS: numSvc) );
		actions.addCommand( "calcPenalty", new  CalculateBillingPenalty(NS: numSvc) );
		actions.addCommand( "calcOthers", new CalculateBillingOthers(NS: numSvc) );
		actions.addCommand( "calcAmountDue", new CalculateBillingAmountDue(NS: numSvc) );
		actions.addCommand( "calcBalance", new CalculateBillingBalance(NS: numSvc) );

		def list = em.getDetails(data);
		if (!list) list = [];
		def currentdate = parseDate(sc.txndate);

		while (true) {
			facts = [];
			details = [];
			facts << new CurrDate([currentdate: currentdate]);
			_start = (_page*_limit)-_limit;
			size = ((_page*_limit) < list.size()? (_page*_limit) + 1 : list.size());
			def scdetailid;
			for (int i=_start; i<size; i++) {
				if (i < (_page*_limit)) {
					itm = list[i];
					detail = specialcollection.read([objid: itm.objid], 'sc-detail');

					param = [
						ledgerid 	: itm?.ledgerid,
						currentdate : currentdate,
						detailid 	: detail?.billingdetailid,
						billingid 	: billing?.objid,
						itemid 		: item?.objid
					]

					xitem = createItem( param );

					facts << buildLedgerFact(xitem);
					facts << buildLoanappFact(xitem);
					facts << buildBillingItemFact(xitem);
					facts << buildAmnestyFact(xitem);
					details << xitem;
				}
			}

			ruleSvc.execute( "loanbilling", facts, actions, null );

			details.each{ o->
				def billitem = facts.find{ (it instanceof LoanBillingItem && o.ledgerid == it.ledgerid) }
				o.penalty = billitem.penalty;
				o.others = billitem.others;
				o.amountdue = billitem.amountdue;
				o.balance = billitem.balance;

				def ledgeritem = loan_ledger.findLastLedgerItemByParentId([parentid: o.ledgerid]);		
				if (ledgeritem?.interestbal > 0) {
					o.amountdue += ledgeritem.interestbal;
					o.balance += ledgeritem.interestbal;
					o.interest += ledgeritem.interestbal;
				}
				if (ledgeritem?.penaltybal > 0) {
					o.amountdue += ledgeritem.penaltybal;
					o.balance += ledgeritem.penaltybal;
					o.penalty += ledgeritem.penaltybal;
				}

				def i = ledger_billing.read(o, 'billing-detail');
				if (!i) {
					ledger_billing.create(o, "billing-detail");	
				} else {
					ledger_billing.update(o, 'billing-detail');
				}
			}

			if (size > (_page*_limit)) {
				_page++;
			} else {
				break;
			}
		}

	}

	private def createItem( params ) {
		def ledger = loan_ledger.read([objid: params.ledgerid]);
		
		def currentdate = parseDate(params.currentdate);
		def maturitydate;
		if (ledger?.dtmatured) {
			maturitydate = parseDate(ledger?.dtmatured);
		}
		if (!ledger.overduepenalty) ledger.overduepenalty = 0;
		//if (1==1) {
		if (maturitydate && (currentdate.compareTo(maturitydate) > 0) && ledger?.overduepenalty == 0) {
			def p = product_type.read([name: ledger?.producttypeid])
			ledger.overduepenalty = ledgerSvc.computeOverduePenalty([balance: ledger.balance, pastduerate: (p.pastduerate? p.pastduerate : 0.00)]);
		}
		loan_ledger.update(ledger, 'overduepenalty');

		def app = loanapp.read([objid: ledger?.appid]);
		def appc = loanapp.read([objid: ledger?.appid], 'loanapp_capture');

		def cust = customer.read([objid: app?.borrower?.objid]);

		def pyt = loan_ledger_payment.findByParentid([parentid: ledger?.objid]);

		def item = [
			objid 				: params.detailid,
			parentid 			: params.itemid,
			billingid 			: params.billingid,
			ledgerid 			: ledger?.objid,
			route 				: app?.route,
			acctid 				: ledger?.acctid,
			loanappid 			: ledger?.appid,
			acctname 			: ledger?.acctname,
			loanamount 			: app?.loanamount,
			loandate 			: appc?.dtreleased,
			term 				: ledger?.term,
			appno 				: app?.appno,
			overpaymentamount	: ledger?.overpaymentamount,
			txndate 			: params.currentdate,
			dailydue			: ledger?.dailydue,
			dtreleased			: appc?.dtreleased,
			dtmatured			: ledger?.dtmatured,
			producttypeid		: ledger?.producttypeid,
			paymentmethod		: ledger?.paymentmethod,
			interestamount		: ledger?.interestamount,
			homeaddress			: cust?.address?.text,
			collectionaddress	: '',
			interest			: 0,
			others				: 0,
			overduepenalty		: ledger?.overduepenalty,
			isfirstbill			: (pyt? 0 : 1)
		];
		item.refno = billingSvc.getRefno([routecode: item?.route?.code]);

		return item;
	}

	public def buildLedgerFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		def item = [
			ledgerid 		: data.objid,
			appid 			: data.appid,
			dtmatured		: data.dtmatured,
			dtstarted		: data.dtstarted,
			dtlastpaid 		: data.dtlastpaid,
			currentdate 	: params.txndate,
			balance 		: data.balance,
			overduepenalty 	: data.overduepenalty,
			balance 		: data.balance,
			overpayment 	: data.overpaymentamount,
			hasamnesty 		: false,
			paymentmethod 	: data.paymentmethod
		];

		def appc = loanapp.read([objid: data.appid], 'loanapp_capture');
		if (appc) item.dtreleased = appc.dtreleased;

		def am = ledgeramnesty.findActiveByDateAndLedgerid([date: parse("yyyy-MM-dd", params.txndate), ledgerid: data?.objid]);
		//def am = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: data.objid, date: parse("yyyy-MM-dd", params.txndate)]);
		if (am) item.hasamnesty = true;

		return new LoanLedger(item);
	}

	public def buildLoanappFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		def producttype = product_type.read([name: data.producttypeid]);
		def item = [
			appid 			: data.appid,
			principal 		: data.totalprincipal,
			interest 		: data.interestamount,
			absentrate 		: producttype.absentpenalty,
			absentpenalty 	: data.absentpenalty,
			underpytrate 	: producttype.underpaymentpenalty,
			intrate 		: producttype.interestrate,
			schedule 		: data.dailydue,
			term 			: data.term,
			scheduledate 	: data.dtcurrentschedule
		];

		return new LoanApp(item);
	}

	public def buildBillingItemFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		
		Calendar c = Calendar.getInstance();
		c.setTime(params.txndate);
		def hassunday = false;
		if ((c.get(Calendar.DAY_OF_WEEK) == 1)) hassunday = true;

		def avgamount = data.dailydue;
		if (data.paymentmethod == 'over') {
			avgamount = data.overpaymentamount;
			def i = ledger_billing.findAvgOverpaymentAmount([parentid: data.objid]);
			if (i) avgamount = i.groupbaseamount;
		}
		
		def item = [
			ledgerid 		: data.objid,
			hassunday 		: hassunday,
			avgamount 		: avgamount,
			currentdate 	: params.txndate,
			dtschedule 		: data.dtcurrentschedule,
		]

		def days = dateSvc.getDaysDiff(item.dtschedule, item.currentdate);
		item.noofholidays = calendarSvc.getNoOfHolidays([lastscheduledate: item.dtschedule, item:[trialAndError: 0, totalDays: days]]);
		def prm = [startdate: item.dtschedule, enddate: item.currentdate, ledgerid: data.objid];
		def e = exemption.findTotaldaysExemptedByStartdateAndEnddateAndLedgeridWithoutHolidays(prm);
		item.noofdaysexempted =  (e.totaldays? e.totaldays : 0);

		return new LoanBillingItem(item);
	}

	private def buildAmnestyFact( params ) {
		def prm = [
			date 	: parse("yyyy-MM-dd", params.txndate),
			ledgerid: params?.ledgerid
		]
		def item = [:];
		def data = ledgeramnesty.findActiveByDateAndLedgerid(prm);
		//def data = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: params.ledgerid, date: parse("yyyy-MM-dd", params.txndate)]);
		if (data) {
			//println 'type ' + data?.type;
			switch (data?.type) {
				case 'WAIVER' 	: item = buildAmnestyWaiverFact(data); break;
				case 'FIX'		: item = buildAmnestyFixFact(data); break;
				case 'BAD_DEBT' : item = buildAmnestyBadDebtFact(data); break;
				case 'SMC' 		: item = buildAmnestySMCFact(data); break;
			}
			/*
			item.ledgerid = data.ledgerid;
			item.balance = data.balance;
			item.type = data.amnestyoption;
			item.waivedinterest = (data.iswaiveinterest > 0? true : false);
			item.waivedpenalty = (data.iswaivepenalty > 0? true : false);
			*/
		}

		//throw new Exception('stopping');

		return new Amnesty(item);
	}

	private def buildAmnestyWaiverFact( am ) {
		def data = [type: 'WAIVER'];

		data.ledgerid = am?.ledgerid;

		def l = loan_ledger.read([objid: am?.ledgerid]);
		if (!l) throw new Exception('Ledger record does not exist or has already been deleted.');

		data.balance = l.balance;

		def ac = ledgeramnesty_waiver.read([objid: am?.refid]);
		if (!ac) throw new Exception('Waiver record does not exist or has already been deleted.');

		data.waivedinterest = ac?.waiveinterest;
		data.waivedpenalty = ac?.waivepenalty;

		return data;

	}

	private def buildAmnestyFixFact( am ) {
		def data = [type: 'FIX']

		data.ledgerid = am?.ledgerid;

		def ac = ledgeramnesty_fix.read([objid: am?.refid]);
		if (!ac) throw new Exception('Fix amnesty record does not exist or has already been deleted.');

		data.balance = ac?.balance;
		data.waivedinterest = false;
		data.waivedpenalty = false;

		return data;
	}

	private def buildAmnestyBadDebtFact( am ) {
		def data = [type: 'BAD_DEBT'];

		data.ledgerid = am?.ledgerid;

		def ac = ledgeramnesty_baddebt([objid: am?.refid]);
		if (!ac) throw new Exception('Bad debt record does not exist or has already been deleted.');

		data.balance = ac?.amount;
		data.waivedinterest = false;
		data.waivedpenalty = false;

		return data;
	}

	private def buildAmnestySMCFact( am ) {
		def data = [type: 'SMC'];

		data.ledgerid = am?.ledgerid;

		def ac = ledgeramnesty_smc.read([objid: am?.refid]);
		if (!ac) throw new Exception('SMC record does not exist or has already been deleted.');

		data.balance = ac?.balance;
		data.waivedinterest = false;
		data.waivedpenalty = false;

		return data;
	}

	/*
	@Env
	def env;

	@ActiveDB("specialcollection_billinggroup")
	def em;

	@ActiveDB('datatxnlog')
	def txnlog; 

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;

	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name: 'txnstate', caption: 'Status'],
			[name: 'name', caption: 'GroupName'],
			[name: 'txntype', caption: 'Type'],
			[name: 'dtstarted', caption: 'DateStarted', type: 'date', outputFormat: 'MMM-dd-yyyy'],
			[name: 'dtended', caption: 'DateEnded', type: 'date', outputFormat: 'MMM-dd-yyyy'],
		];
	}

	private def parseDate( date ) {
		if (date instanceof Date) {
			return date;
		} else {
			return new java.text.SimpleDateFormat("yyyy-MM-dd").format(java.sql.Date.valueOf(date));
		}
	}

	private void validate( data ) {
		def currdate = dateSvc.getServerDateAsString().split(" ")[0];
		def startdate = parseDate(data.dtstarted).toString();

		if (startdate.compareTo(currdate) < 0)
			throw new Exception("Start date must be greater than or equal to current date.");

		def enddate = parseDate(data.dtended).toString();

		if (startdate.compareTo(enddate) > 0)
			throw new Exception("End date must be greater than or equal to start date.");

		if (!data.ledgers) throw new Exception("At least 1 ledger is required.");
	}

	void beforeCreate( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = [objid: env.USERID, name: env.NAME];
	}

	void beforeUpdate( data ) {
		validate(data);
	}

	void afterCreate( data ) {
		updateLedgers(data);
	}

	void afterUpdate( data ) {
		updateLedgers(data);
	}

	private void updateLedgers( data ) {
		data._removedledger.each{ o->
			em.delete(o, "bg-detail");
		}

		data._addedledger.each{ o->
			if (!o.objid) o.objid = 'BGD' + new UID();
			if (!o.parentid) o.parentid = data.objid;
			em.create(o, "bg-detail");
		}

		def xlist = data.ledgers.findAll{ it._edited==true }
		xlist.each{ o->
			em.update(o, "bg-detail");
		}

		data._addedledger = [];
		data._removedledger = [];
		data.ledgers = em.getDetails(data);
	}

	void afterOpen( data ) {
		data.ledgers = em.getDetails(data);
	}

	@ProxyMethod
	public def getTypes() {
		return ['FOLLOWUP', 'SPECIAL'];
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeStateImpl(params, 'FOR_APPROVAL');

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: dateSvc.serverDate, 
			refid 		: data.objid, 
			filetype 	: 'billinggroup', 
			message 	: 'For approval of billing group for ' + data.dtstarted + ' to ' + data.dtended + '.', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return data;
	}

	@ProxyMethod
	public def approveDocument( params ) {
		return approveImpl(params, 'APPROVED');
	}

	@ProxyMethod
	public def disapprove( params ) {
		return approveImpl(params, 'DISAPPROVED');
	}

	private def approveImpl( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Billing group record does not exist or has already been deleted.");

		data.dtposted = dateSvc.serverDate;
		data.poster = [objid: env.USERID, name: env.NAME];
		em.update(data, "bg-post");

		data = changeStateImpl(params, state);

		inboxSvc.removeMessageByRefid([refid: data.objid]); 
		return data;
	}

	private def changeStateImpl( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception("Billing group record does not exist or has already been deleted.");

		if (data.txnstate==state) {
			throw new Exception("Billing group already ${state}.");
		}

		data.txnstate = state;
		em.changeState(data);

		def action, remarks;
		switch (state.toUpperCase()) {
			case 'APPROVED'		: 	action = 'APPROVE';
									remarks = 'Billing group approved.';
									break;
			case 'DISAPPROVED' 	: 	action = 'DISAPPROVE';
									remarks = 'Billing group disapproved.';
									break;
			case 'FOR_APPROVAL' : 	action = 'FOR APPROVAL';
									remarks = 'Billing group submitted for approval';
									break;
		}

		def loginfo = [
			objid 	: 'TLOG' + new UID(), 
			txndate : dateSvc.serverDate, 
			txnid   : data.objid, 
			user    : [objid: env.USERID, username: env.USER], 
			action	: action, 
			remarks : remarks
		]; 
		txnlog.create( loginfo ); 

		return open(data);
	}

	@ProxyMethod
	public def getDetailsWithLedgerInfo( params ) {
		def list = em.getDetailsWithLedgerInfo([objid: params.objid]);

		return list.findAll{ it.state=='OPEN' }
	}
	*/
}