import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanAppService 
{	
	@ActiveDB("borrower")
	def borrower;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('loanapp_borrower')
	def loanapp_borrower;

	@ActiveDB('loanapp_business')
	def business;

	@ActiveDB('loan_product_type')
	def productType;	

	@ActiveDB('loan_route')
	def emRoute;	

	@Service('DateService') 
	def dateService;

	@Service('BorrowerService')
	def borrowerService;

	@Service('LoanLedgerService')
	def loanLedgerSvc;

	@Env 
	def env;

	@DataContext('loanapp_collateral_appliance') 
	def appliance_db;

	@DataContext('loanapp_collateral_vehicle') 
	def vehicle_db;

	@DataContext('loanapp_collateral_property') 
	def property_db;

	@DataContext('loanapp_collateral_other') 
	def other_db;

	@DataContext('loanapp_recommendation') 
	def recom_db;

	@ProxyMethod(local=true) 
	public def getEm() { return loanapp; } 	

	@ProxyMethod 
	public def getProductTypes() { 
		return productType.getList([searchtext: '%']); 
	} 

	@ProxyMethod 
	public def open( params ) {
		def data = findByObjid(params); 
		if (!data) throw new Exception("'"+params.objid+"' loan application record not found");
		
		def route = emRoute.findByCode([code: data.route?.code]); 
		if (route) data.route = route;

		def b = borrower.read([objid: data.borrower.objid]);
		if (b) {
			data.borrower.entitytype = b.type;
			//println 'entity type ' + b.type;
		}

		def nextto = loanapp_borrower.findNextto([borrowerid: data.borrower.objid]);
		if (nextto) {
			if (!nextto.borrowername) {
				b = borrower.read([objid: nextto?.objid]);
				nextto.borrowername = b?.name;
			}
			data.nextto = nextto;
		}

		return data;
	}

	@ProxyMethod 
	public def update( params ) {
		def data = findByObjid(params); 
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found');

		loanapp.update(params);
		if(params.route) loanapp.update(params, 'route');

		if (params.nextto) {
			def nextto = loanapp_borrower.findNextto([borrowerid: params.borrower.objid]);
			if (!nextto) {
				def itm = [
					objid: 'LBN'+new UID(),
					borrowerid: params.borrower.objid,
					nexttoid: params.nextto.objid
				]
				loanapp_borrower.create(itm, 'nextto');
			} else {
				//loanapp_borrower.update(itm, 'nextto');
			}
		}

		return params;
	} 


	@ProxyMethod(local=true) 
	public def findByObjid( params ) {
		def data = loanapp.findByObjid(params);
		return data;
	} 

	@ProxyMethod(local=true) 
	public void updateBorrowerIndices(loanappid, list) { 
		def data = findByObjid([objid: loanappid]); 
		loanapp.removeBorrowerIndices([appid: data.objid]); 
		for (o in list) {
			o.objid = 'IDX' + new UID();
			o.appid = data.objid;
			o.searchtext = (o.borrowername ? o.borrowername : o.name); 
			loanapp.create(o, 'loanapp_search_borrower_index'); 
		}

		data.branchcode = data.branch.code;
		data.branchname = data.branch.name;
		data.routecode = data.route?.code;
		data.fullborrowername = list.collect{ it.borrowername }.join(' AND '); 

		def si = loanapp.findSearchIndex([objid: data.objid]);
		if (si == null) { 
			data.dtposted = data.dtcreated;
			data.postedby = data.createdby;
			loanapp.create(data, 'loanapp_search');
		} else {
			loanapp.update(data, 'loanapp_search');
		}
	}

	@ProxyMethod 
	public def submitForInspection( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'PENDING') 
			throw new Exception('Loan status must be PENDING before submitting for inspection'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_INSPECTION';
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted;
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		loanapp.removeRecommendation(data); 

		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted,
			postedby:  	data.postedby,
			remarks: 	'SUBMITTED FOR INSPECTION'
		];
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	} 

	@ProxyMethod 
	public def submitForCrecom( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_INSPECTION') 
			throw new Exception('Loan status must be FOR_INSPECTION before submitting for CRECOM'); 

		def o = recom_db.find([ objid: data.objid ]).first(); 
		if ( !o?.ciremarks ) throw new Exception('Please provide a CI Recommendation'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_CRECOM';
		loanapp.update(data); 

		o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted;
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 

		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'SUBMITTED FOR CRECOM' 
		];
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod 
	public def returnForCI( params ) {
		if (!params.objid) throw new Exception('Please specify objid');
		if (!params.remarks) throw new Exception('Please specify remarks');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_CRECOM') 
			throw new Exception('Loan status must be FOR_CRECOM before submitting back for inspection'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_INSPECTION';
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted;
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 

		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted,
			postedby:  	data.postedby,
			remarks: 	params.remarks 
		];
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	} 	

	@ProxyMethod 
	public def submitForApproval( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		/*
		if (!(data.state.toString().matches('FOR_CRECOM))) {
			throw new Exception('Loan status must be FOR_CRECOM or SEND_BACK before submitting for approval'); 
		}
		*/
		if (data.state != 'FOR_CRECOM') {
			throw new Exception('Loan status must be FOR_CRECOM before submitting for approval'); 
		}

		def o = recom_db.find([ objid: data.objid ]).first(); 
		if ( !o?.ciremarks ) throw new Exception('Please provide a CI Recommendation'); 
		if ( !o?.crecomremarks ) throw new Exception('Please provide a CRECOM Recommendation'); 
		if ( !o?.marketeramount ) throw new RuntimeException('Please provide Market Amount');
		if ( !o?.ciamount ) throw new RuntimeException('Please provide CI Amount');
		if ( !o?.fcaamount ) throw new RuntimeException('Please provide FCA Amount');
		if ( !o?.caoamount ) throw new RuntimeException('Please provide CAO Amount');
		if ( !o?.bcohamount ) throw new RuntimeException('Please provide BCOH Amount');

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_APPROVAL'; 		
		loanapp.update(data); 

		o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 

		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'SUBMITTED FOR APPROVAL' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}

	@ProxyMethod
	public def sendBack( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_APPROVAL') {
			throw new Exception('Loan status must be FOR_APPROVAL before sending back'); 
		}

		def rundate = dateService.serverDate.toString();

		//data.dtposted = dateService.serverDate.toString(); 
		//data.postedby = env.USERID; 
		data.dtposted = (params.dtposted? params.dtposted : rundate);
		data.postedby = (params.postedby? params.postedby : env.NAME);
		data.state = 'FOR_CRECOM'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'SEND BACK' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}

	@ProxyMethod
	public def approve( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_APPROVAL') 
			throw new Exception('Loan status must be FOR_APPROVAL'); 

		def rundate = dateService.serverDate.toString();

		//data.dtposted = dateService.serverDate.toString(); 
		//data.postedby = env.USERID; 
		data.dtposted = (params.dtposted? params.dtposted : rundate);
		data.postedby = (params.postedby? params.postedby : env.NAME);
		data.state = 'APPROVED'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'APPROVED' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def disapprove( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_APPROVAL') 
			throw new Exception('Loan status must be FOR_APPROVAL'); 

		def rundate = dateService.serverDate.toString(); 

		//data.dtposted = dateService.serverDate.toString(); 
		//data.postedby = env.USERID; 
		data.dtposted = (params.dtposted? params.dtposted : rundate);
		data.postedby = (params.postedby? params.postedby : env.NAME);
		data.state = 'DISAPPROVED'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'Disapprove' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def disqualifiedOut( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_APPROVAL') 
			throw new Exception('Loan status must be FOR_APPROVAL'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'DISQUALIFIED_OUT'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'DISQUALIFIED OUT' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def cancelledOut( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_APPROVAL') 
			throw new Exception('Loan status must be FOR_APPROVAL'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'CANCELLED_OUT'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'CANCELLED OUT' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def submitForRequirement( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'APPROVED') 
			throw new Exception('Loan status must be APPROVED'); 

		def extinfo = loanapp.read([ objid: params.objid ], 'extinfo');
		if (!extinfo?.approvedrecommendation) throw new RuntimeException('Please select recommendation to proceed');

		def amount = extinfo.approvedrecommendation?.amount;;

		data.loanamount = amount;
		data.approval.amount = amount;
		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_REQUIREMENT'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.loanamount = amount;
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'FOR REQUIREMENT' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def submitForProcessing( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_REQUIREMENT') 
			throw new Exception('Loan status must be FOR_REQUIREMENT'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_PROCESSING'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'FOR PROCESSING' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def submitForRelease( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_PROCESSING') 
			throw new Exception('Loan status must be FOR_PROCESSING'); 

		data.dtposted = dateService.serverDate.toString(); 
		data.postedby = env.USERID; 
		data.state = 'FOR_RELEASE'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'FOR RELEASE' 
		]; 
		loanapp.create(o, 'loanapp_log'); 
		return data; 
	}	

	@ProxyMethod
	public def release( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (data.state != 'FOR_RELEASE') 
			throw new Exception('Loan status must be FOR_RELEASE'); 

		def rundate = dateService.serverDate.toString(); 

		data.dtposted = rundate;
		data.postedby = env.USERID; 
		data.state = 'RELEASED'; 		
		loanapp.update(data); 

		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		o.dtposted = data.dtposted; 
		o.postedby = data.postedby;
		loanapp.update(o, 'loanapp_search'); 
		
		o = [
			objid: 		'LOG' + new UID(),
			appid: 		data.objid, 
			dtposted: 	data.dtposted, 
			postedby:  	data.postedby,
			remarks: 	'RELEASED' 
		]; 
		loanapp.create(o, 'loanapp_log'); 

		def dtreleased = rundate.toString().split(' ')[0];
		def extinfo = loanapp.read([ objid: data.objid ], 'extinfo');
		if (!extinfo) {
			extinfo = [
				objid: data.objid,
				netamoount: 0,
				totalcharges: 0,
				dtreleased: dtreleased
			];
			loanapp.create( extinfo, 'extinfo' );
		} else {
			extinfo.dtreleased = dtreleased;
			loanapp.update( extinfo, 'extinfo' );
		}
		createLedger( data );

		return data; 
	}	

	def createLedger( params ) {
		def prm = [
			appid: params.objid,
			producttype: params.producttype
		]
		def data = loanLedgerSvc.resolveEntity( prm );
		if (!data.objid) data.objid = 'LEDGER' + new UID();
		data.txnmode = params.appmode;
		data.acctid = params.borrower.objid;
		data.acctname = params.borrower.name;
		data.paymentmethod = 'schedule';
		if (!data.dtmatured) data.dtmatured = loanLedgerSvc.calculateMaturityDate( data.dtreleased, data.loantype, data.producttype);
		//println 'data';
		//data?.each{ println it }
		loanLedgerSvc.create( data );
		//throw new RuntimeException("stop create ledger");
	}

	@ProxyMethod
	public def getBusinesses(params) {
		if(!params.objid) throw new Exception('please specify objid');
		return business.getList([parentid: params.objid]);
	}


	@ProxyMethod 
	public def getCollaterals( params ) {
		if(!params.objid) throw new Exception('please specify objid');

	}
} 