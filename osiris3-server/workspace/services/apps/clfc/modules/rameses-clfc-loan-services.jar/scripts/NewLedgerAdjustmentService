import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class NewLedgerAdjustmentService extends ActiveCrudListService {

	@Env
	def env;

	@ActiveDB("loan_ledger_adjustment")
	def em;

	@ActiveDB("borrower")
	def borrower;

	@ActiveDB("datatxnlog")
	def txnlog; 

	@ActiveDB("var")
	def var;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@ActiveDB("ledger_adjustment_request")
	def adjustment_request;

	@ActiveDB("loanapp")
	def loanapp;

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;
	
	@ProxyMethod
	public def sampleInsertData() {
		def data = [
			objid 		: 'NLA' + new UID(),
			txnstate 	: 'DRAFT',
			dtcreated 	: dateSvc.serverDate,
			author 		: [objid: 'SYSTEM', name: 'SYSTEM'],
			ledgerid 	: 'LEDGER-48d6a314:145c9cb18de:-75b3',
			requesttype : 'ADJUSTMENT',
			borrower 	: [objid: 'CUST-48d6a314:145c9cb18de:-756e', name: 'ABUCIDO, DAHLIA'],
			txndate 	: '2017-03-31',
			amount 		: 0,
			debit 		: [type: 'interest', item: [caption: 'Interest', name: 'interest'], amount: 12],
			credit 		: [type: 'penalty', item: [caption: 'Penalty', name: 'penalty'], amount: 12],
			remarks 	: 'test'
		];
		em.create(data);
	}

	@ProxyMethod
	public def sampleGetData() {
		def data = em.read([objid: 'NLA7d13c74c:15b22cfe936:-7ff8']);
		println 'data';
		data?.each{ println it }
		return data;
	}

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) {
			cols << [name: 'txnstate', caption: 'Status'];
		}

		if (!params.ledgerid) {
			cols << [name: 'borrower.name', caption: 'Borrower'];
		}

		cols << [name: 'requesttype', caption: 'Request Type'];
		cols << [name: 'txndate', caption: 'Adjustment Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'debit.type', caption: 'Debit Type'];
		cols << [name: 'debit.amount', caption: 'Debit Amount', type: 'decimal', format: '#,##0.00'];
		cols << [name: 'credit.type', caption: 'Credit Type'];
		cols << [name: 'credit.amount', caption: 'Credit Amount', type: 'decimal', format: '#,##0.00'];

		if (params.state!='DELETED') {
			cols << [name: 'modifiedby.name', caption: 'Modified By'];
		}

		if (params.state=='APPROVED') {
			cols << [name: 'poster.name', caption: 'Approved By'];
		}
		if (params.state=='DISAPPROVED') {
			cols << [name: 'poster.name', caption: 'Disapproved By'];
		}

		return cols;
	}

	@ProxyMethod
	public def xgetColumns( params ) {
		def cols = [];

		if (!params.state) {
			cols << [name: 'txnstate', caption: 'Status'];
		}

		if (!params.ledgerid) {
			cols << [name: 'borrower.name', caption: 'Borrower'];
		}

		cols << [name: 'txndate', caption: 'Adjustment Date', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'amount', caption: 'Amount', type: 'decimal', format: '#,##0.00'];
		
		if (params.state!='DELETED') {
			cols << [name: 'modifiedby.name', caption: 'Modified By'];
		}

		if (params.state=='APPROVED') {
			cols << [name: 'poster.name', caption: 'Approved By'];
		}
		if (params.state=='DISAPPROVED') {
			cols << [name: 'poster.name', caption: 'Disapproved By'];
		}

		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: 'All'],
			[caption: 'DRAFT', state: 'DRAFT'],
			[caption: 'FOR APPROVAL', state: 'FOR_APPROVAL'],
			[caption: 'APPROVED', state: 'APPROVED'],
			[caption: 'DISAPPROVED', state: 'DISAPPROVED'],
			[caption: 'DELETED', state: 'DELETED']
		]
	}

	@ProxyMethod
	public def getTypeList() {
		def list = [
			[caption: 'Penalty', name: 'penalty'],
			[caption: 'Partial Payment', name: 'partialpayment']
		];
		return list;
	}

	@ProxyMethod
	public def getLedgerInfo( params ) {
		def ledger = loan_ledger.read([objid: params.ledgerid]);
		if (!ledger) throw new RuntimeException("Ledger record does not exist or has already been deleted.");

		def app = loanapp.read([objid: ledger.appid]);
		if (!app) throw new RuntimeException("Loan Application record does not exist or has already been deleted.");

		def b = borrower.read([objid: ledger.acctid]);
		if (!b) throw new RuntimeException("Borrower record does not exist or has already been deleted.");

		def data = [
			objid	: ledger.objid,
			app 	: [objid: app.objid, appno: app.appno],
			borrower: b
		];
		return data;
	}


	/*
	@ProxyMethod
	public def getBorrower( data ) {
		def b = borrower.read(data);
		if (!b) throw new Exception("Borrower record does not exist or has already been deleted.");

		if (!b.name) b.name = b.lastname + ', ' + b.firstname + (b.middlename? ' ' + b.middlename : '');
		return b;
	}
	*/

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : '') + '%';

		if (params.state) {
			params._listMethod = 'getListByState';
		} 
		if (params.ledgerid) {
			params._listMethod = 'getListByLedgerid';
		}
		if (params.state && params.ledgerid) {
			params._listMethod = 'getListByStateAndLedgerid';
		}
	}

	private def getUser() {
		return [objid: env.USERID, name: env.NAME];
	}

	private void validate( data ) {
		if (data.debit.item.name == data.credit.item.name) {
			throw new RuntimeException("Type credited must not be the same with type debited.");
		}
	}

	void beforeCreate( data ) {
		validate(data);
		data.dtcreated = dateSvc.serverDate;
		data.author = getUser();
		if (data.amount == null) data.amount = 0;
		if (!data.txnstate) data.txnstate = 'DRAFT';
	}

	void beforeUpdate( data ) {
		validate(data);
	}

	void afterOpen( data ) {

		data.allowrequest = false;
		data.hasdeleterequest = false;
		if (data.txnstate == 'APPROVED') {
			data.allowrequest = true;
			def i = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'FOR_APPROVAL', txntype: 'DELETE']);
			if (i) data.allowrequest = false;
		}

		/*
		if (data.requesttype == 'MODIFY') {
			def i = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'FOR_APPROVAL', txntype: 'MODIFY']);
			if (i) {
				data.hasmodifyrequest = true;
				data.modifyremarks = i.remarks;
				if (data.remarks) data.remarks += ' \n\nModification remarks: \n';
				data.remarks += i.remarks;
				def info = [:];
				if (i.info) {
					info = em.serializer.read(i.info);
					i.remove('info');
				}
				//println 'i ' + i;
				if (info.modifyamount == true) data.newamount = info.newdata_amount;
				if (info.modifydate == true) data.newdate = info.newdata_txndate;
			}

		}
		*/

		def req;
		if (data.requesttype == 'DELETE') {
			req = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'FOR_APPROVAL', txntype: 'DELETE']);
		}
		if (data.txnstate == 'DELETED') {
			req = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'APPROVED', txntype: 'DELETE']);
		}

		if (req) {
			data.hasdeleterequest = true;
			data.deleteremarks = req.remarks;
			if (data.remarks) data.remarks += ' \n\nDeletion remarks: \n';
			data.remarks += req.remarks;
		}
	}

	@ProxyMethod
	public def submitForApproval( params ) {
		def data = changeState(params, 'FOR_APPROVAL');

		def serverdate = dateSvc.serverDate;

		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: serverdate, 
			refid 		: data.objid, 
			filetype 	: 'ledger:adjustment', 
			message 	: 'For approval of adjustment of ' + data.borrower.name, 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		def sysvar = var.read([name: "adjustment_amount_threshold"]);
		if (sysvar) {
			def threshold = 0;
			if (sysvar.value) {
				threshold = new BigDecimal(sysvar.value + "").setScale(2);
			}

			def amt = data.debit.amount;
			if (amt <= threshold) {
				data = changeState(data, 'APPROVED');

				data.dtposted = serverdate;
				data.poster = [objid: 'SYSTEM', name: 'SYSTEM'];
				em.update(data, 'adjustment-post');

				inboxSvc.removeMessageByRefid([refid: data.objid]);
			}
		}

		return open(data);
	}

	@ProxyMethod
	public def approveDocument( params ) {
		def data = approveImpl(params, 'APPROVED');

		return data;
	}

	@ProxyMethod
	public def disapproveDocument( params ) {
		def data = approveImpl(params, 'DISAPPROVED');

		return data;
	}

	private def approveImpl( params, state ) {
		def data = changeState(params, state);

		data.dtposted = dateSvc.serverDate;
		data.poster = getUser();
		em.update(data, 'adjustment-post');

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	private def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new Exception('Ledger adjustment record does not exist or has already been deleted.');

		if (data.txnstate == state) {
			throw new Exception('Ledger adjustment has already been ' + state + '.');
		}

		data.txnstate = state;
		em.update(data);

		def request;
		switch (data.requesttype) {
			case 'ADJUSTMENT'	: request = 'Adjustment'; break;
			case 'MODIFY' 		: request = 'Modify'; break;
			case 'DELETE' 		: request = 'Delete'; break; 
		}

		def action, remarks;
		switch (state) {
			case 'FOR_APPROVAL': 
				action = 'For Approval';
				remarks = 'Submit for approval ' + request + ' request for (' + data.borrower.name + ' - ' + data.loanapp.appno + ')';
				break;
			case 'APPROVED': 
				action = 'Approve';
				remarks = 'Approve' + request + ' request for (' + data.borrower.name + ' - ' + data.loanapp.appno + ')';
				break;
			case 'DISAPPROVED': 
				action = 'Disapprove';
				remarks = 'Disapprove ' + request + ' request for (' + data.borrower.name + ' - ' + data.loanapp.appno + ')';
				break;
		}

		if (action && remarks) {
			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action, 
				remarks : remarks
			]; 
			txnlog.create( loginfo );
		}

		return open(data);
	}

	@ProxyMethod
	public def requestForDelete( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Adjustment record does not exist or has already been deleted.");

		def req = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'FOR_APPROVAL', txntype: 'DELETE']);
		if (!req) {
			req = [
				objid		: 'LAD' + new UID(),
				txnstate 	: 'FOR_APPROVAL',
				dtcreated 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				adjustmentid: data.objid,
				txntype 	: 'DELETE',
				remarks 	: params.remarks,
				olddata		: data
			];
			adjustment_request.create(req);

			def msginfo = [ 
				objid 		: data.objid, 
				dtcreated	: req.dtcreated, 
				refid 		: data.objid, 
				filetype 	: 'ledger:adjustment', 
				message 	: 'For approval of delete request for adjustment of ' + data.borrower.name, 
				senderid	: env.USERID, 
				sendername 	: env.NAME, 
				recipientid : 'APPROVER' 
			]; 
			inboxSvc.addMessage( msginfo );
		}

		data.txnstate = 'FOR_APPROVAL';
		data.requesttype = 'DELETE';
		em.update(data);

		return open(data);
	}

	@ProxyMethod
	public def approveDelete( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Adjustment record does not exist or has already been deleted.");

		data.txnstate = 'DELETED';
		em.update(data);

		def req = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'FOR_APPROVAL', txntype: 'DELETE']);
		if (req) {
			req.txnstate = 'APPROVED';
			adjustment_request.changeState(req);

			req.dtposted = dateSvc.serverDate;
			req.poster = [objid: env.USERID, name: env.NAME];
			adjustment_request.update(req, "adjustment-delete-post");
		}

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	@ProxyMethod
	public def disapproveDelete( params ) {
		def data = em.read(params);
		if (!data) throw new Exception("Adjustment record does not exist or has already been deleted.");

		data.txnstate = 'APPROVED';
		data.requesttype = 'ADJUSTMENT';

		def req = adjustment_request.findRequestByAdjustmentidAndTxnstateAndTxntype([adjustmentid: data.objid, txnstate: 'FOR_APPROVAL', txntype: 'DELETE']);
		if (req) {
			req.txnstate = 'DISAPPROVED';
			adjustment_request.changeState(req);

			def info = em.serializer.read(req.info);
			data.txnstate = info.olddata_txnstate;
			data.requesttype = info.olddata_requesttype;

			req.dtposted = dateSvc.serverDate;
			req.poster = [objid: env.USERID, name: env.NAME];
			adjustment_request.update(req, "adjustment-delete-post");
		}
		//println 'request ' + req;
		//println 'data ' + data;
		//throw new Exception("stop");
		em.update(data);

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open(data);
	}

	private void validateModify( data ) {
		if (data.debit.item.name == data.credit.item.name) {
			throw new RuntimeException("Modify type credited must not be the same with type debited.");
		}
	}

	@ProxyMethod
	public def saveModify( params ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Adjustment record does not exist or has already been deleted.");

		data.modify = params.modify;
		validateModify(data.modify);

		data.dtmodified = dateSvc.serverDate;
		data.modifiedby = getUser();

		data.txnstate = params.txnstate;
		data.requesttype = params.requesttype;
		em.update(data);

		return open(data);
	}

	@ProxyMethod
	public def submitForApprovalModify( params ) {
		def data = submitForApproval(params);

		if (data.txnstate == 'APPROVED') {
			data = resolveApproveModify(data);
		}

		return open(data);
	}

	@ProxyMethod
	public def approveModify( params ) {
		def data = approveDocument(params);
		data = resolveApproveModify(data);

		return open(data);
	}

	private def resolveApproveModify( data ) {
		data.requesttype = 'ADJUSTMENT';

		def mod = data.modify;
		data.txndate = mod.txndate;
		data.debit = mod.debit;
		data.credit = mod.credit;
		em.update(data);

		return data;
	}

	@ProxyMethod
	public def disapproveModify( params ) {
		def data = disapproveDocument(params);

		data.txnstate = "APPROVED";
		data.requesttype = "ADJUSTMENT";
		em.update(data);

		return open(data);
	}

}