import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanProductTypeAttributeService extends ActiveCrudListService {

	@Env
	def env;

	@ActiveDB("loan_producttype_attribute")
	def em;

	@ActiveDB('datatxnlog') 
	def txnlog;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: "txnstate", caption: "Status"];

		//cols << [name: "code", caption: "Code"];
		cols << [name: "title", caption: "Title"];
		cols << [name: "fieldname", caption: "Field Name"];
		cols << [name: "varname", caption: "Var. Name"];
		cols << [name: "datatype", caption: "Data Type"];
		cols << [name: "handler", caption: "Handler"];
		cols << [name: "category", caption: "Category"];

		return cols;
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: "All"],
			[caption: "DRAFT", state: "DRAFT"],
			[caption: "ACTIVATED", state: "ACTIVATED"],
			[caption: "DEACTIVATED", state: "DEACTIVATED"]
		];
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : "") + "%";
		if (params.state) {
			params._listMethod = "getListByState";
		}
	}

	def getUser() {
		return [objid: env.USERID, name: env.NAME];
	}

	void beforeCreate( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = getUser();
		if (!data.txnstate) data.txnstate = "DRAFT";
	}

	void afterOpen( data ) {
		if (data.txnstate.matches("DRAFT|DEACTIVATED") && data.conditiontype=="USER") {
			data._allowedit = true;
		}
	}

	@ProxyMethod
	public def getDatatypeList() {
		return ["decimal", "integer", "date", "string"];
	}

	@ProxyMethod
	public def activate( params ) {
		def data = changeState(params, "ACTIVATED");
		return open(data);
	}

	@ProxyMethod
	public def deactivate( params ) {
		def data = changeState(params, "DEACTIVATED");
		return open(data);
	}

	def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Product type attribute record does not exist or has already been deleted.");

		if (data.txnstate == state) {
			throw new RuntimeException("Product type attribute record has already been " + state + ".");
		}

		data.txnstate = state;
		em.update(data);

		def action, remarks;

		switch (data.txnstate) {
			case 'ACTIVATED':
				action = "Activate";
				remarks = "Product type attribute activated";
				break;
			case 'DEACTIVATED':
				action = "Deactivate";
				remarks = "Product type attribute deactivated";
				break;
		}

		if (action && remarks) {

			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.code, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action, 
				remarks : remarks 
			]; 
			txnlog.create( loginfo ); 
		}

		return open(data);
	}


	
}