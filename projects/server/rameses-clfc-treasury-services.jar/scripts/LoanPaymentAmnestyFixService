import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.server.common.*;
import com.rameses.rules.common.RuleRequest;
import java.rmi.server.UID;
import org.joda.time.*;
import org.drools.KnowledgeBase;
import java.text.*;

class LoanPaymentAmnestyFixService
{
	@ActiveDB('ledgeramnesty_fix')
	def ledgeramnesty_fix;

	@ActiveDB('loan_ledger')
	def loan_ledger;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('loan_ledger_payment')
	def ledger_payment;

	@Resource('RuleService')
	def ruleSvc;

	@Service('DateService')
	def dateSvc;

	@Service('LoanPaymentAmnestyService')
	def amnestySvc;

	@ProxyMethod(local=true)
	public def post( params, amnesty ) {
		def txndate;
		if (params.entity) {
			txndate = params.entity.txndate;
		} else {
			txndate = params.txndate;
		}

		def am = ledgeramnesty_fix.read([objid: amnesty?.refid]);
		if (!am) throw new Exception('Fix amnesty record does not exist or has already been deleted.');

		def ledger = loan_ledger.read([objid: am.ledger.objid]);
		if (!ledger) throw new Exception('Ledger record does not exist or has already been deleted.');

		def lastpaymentdate;
		if (ledger.dtlastpaid) {
			lastpaymentdate = parseDate(ledger.dtlastpaid);
		}

		def xdate = parseDate(txndate);

		def day = 1;
		def lastledgeritem = loan_ledger.findLastLedgerItemByParentId([parentid: ledger.objid]);
		if (lastledgeritem) {
			day = lastledgeritem.day;
		}

		def xpayment = loan_ledger.read([objid: params.ledgerpaymentid], 'payment');
		if (xpayment) {
			xpayment.balance = am.ledger.balance;
			xpayment.amnestybalance = am.balance;
			loan_ledger.update(xpayment, 'payment');
			xpayment = loan_ledger.read(xpayment, 'payment');
		}

		def results = [];

		def paymentFact = [amountPaid: params.payamount];

		def interestincome = 0;
		if (am?.balance > am?.ledger?.balance) {
			interestincome = am.balance - am.ledger.balance;
		}

		def referencesFact = [
			amountPaid 		: params.payamount,
			balance 		: am?.balance,
			interestIncome 	: interestincome
		];

		if (lastpaymentdate && (xdate.compareTo(lastpaymentdate) == 0)) {
			amnestySvc.offSetLastRecord(lastledgeritem);

			def xpayments = ledger_payment.getPaymentsByParentidAndTxndate([parentid: ledger.objid, txndate: txndate]);
			xpayments.sort{ it.refno }

			def idx = 0, xitm;
			def xlist = [];
			while (idx < xpayments.size()) {
				xitm = xpayments[idx];
				xlist.add(xitm);
				if (xitm.objid == params.ledgerpaymentid) {
					break;
				}
				idx++;
			}
			xpayments.clear();
			xpayments.addAll(xlist);

			def cp = xpayments.find{ it.objid == params.ledgerpaymentid }
			if (cp) xpayments.remove(cp);

			def totalprevious = xpayments?.amount.sum();
			if (!totalprevious) totalprevious = 0;

			paymentFact.amountPaid = totalprevious + params.payamount;

			xpayments.sort{ it.refno }

			def fp = xpayments[0];
			if (fp) {
				fp = loan_ledger.read([objid: fp.objid], 'payment');
				if (fp.amnestybalance) {
					referencesFact.balance = fp.amnestybalance;
				}

			}
		}

		def req = new RuleRequest("amnestyfix");

		req.addFact("amnestyfix", "Payment", paymentFact); 
		req.addFact("amnestyfix", "References", referencesFact);
		//req.addFact("loan", "Compromise", compromiseFact);
		req.addGlobal("results", results);

		try {
			ruleSvc.execute( req );	
		} catch (Exception e) {
			e.printStackTrace();
		}


		def lastitem;
		if (results) {
			lastitem = results[results.size()-1];
			def bal = lastitem.balance;

			def tp = lastitem.totalpenalty;
			if (!tp) tp = 0;
			xpayment.totalpenalty = tp;

			def ti = lastitem.totalinterest;
			if (!ti) ti = 0;
			xpayment.totalinterest = ti;

			if (bal != null && bal != '') {

				loan_ledger.update([objid: ledger.objid, balance: lastitem.balance], "balance");
				ledgeramnesty_fix.update([objid: am.objid, balance: lastitem.balance], 'balance');

				if (bal == 0) {
					def xledger = loan_ledger.read(ledger);
					xledger.state = 'CLOSE';
					loan_ledger.update(xledger);
					loanapp.update([objid: xledger.appid, state: 'CLOSED']);
					def xx = loanapp.read([objid: xledger.appid], 'loanapp_search');
					if (xx) {
						loanapp.update([objid: xledger.appid, state: 'CLOSED'], 'loanapp_search');	
					}
				}
			}
		}

		def la = loanapp.read([objid: ledger.appid], 'loanapp_close');
		def xledger = loan_ledger.read(ledger);
		if (la || referencesFact.isFullPayment == true || xledger.balance == 0) {
			xledger.state = 'CLOSE';
			loan_ledger.update(xledger);
			loanapp.update([objid: xledger.appid, state: 'CLOSED']);
			def xx = loanapp.read([objid: xledger.appid], 'loanapp_search');
			if (xx) {
				loanapp.update([objid: xledger.appid, state: 'CLOSED'], 'loanapp_search');	
			}
		}

		def currentdate = dateSvc.serverDate;
		results?.each{ o->
			def itm = amnestySvc.createLedgerItem(ledger);
			itm.amnestyid = amnesty.objid;

			itm.amtdue = 0;
			if (o.payment) {
				itm.amtdue = new BigDecimal(o.payment).setScale(2, BigDecimal.ROUND_HALF_UP);
			}
			itm.amtpaid = itm.amtdue;

			itm.interestdue = 0;
			if (o.interestPaid) {
				itm.interestdue  = new BigDecimal(o.interestPaid).setScale(2, BigDecimal.ROUND_HALF_UP);
			}
			itm.interestpaid = itm.interestdue;

			itm.penaltydue = 0;
			if (o.penalty) {
				itm.penaltydue = new BigDecimal(o.penalty).setScale(2, BigDecimal.ROUND_HALF_UP);
			}
			itm.penaltypaid = itm.penaltydue;

			itm.amtbal = 0;
			
			itm.interestbal = 0;
			if (o.interestbal) {
				itm.interestbal = o.interestbal;
			}

			itm.penaltybal = 0;
			if (o.penaltybal) {
				itm.penaltybal = o.penaltybal;
			}

			itm.dtpaid = txndate;//it.dtpaid? it.dtpaid : null;
			itm.refno = params.refno;//it.refno? it.refno : null;
			itm.day = day;
			if (o.day) {
				itm.day = o.day;//dateSvc.getDaysDiff(parseDate(appc?.dtreleased), parseDate(o.scheduledate)) - 1;
			}

			itm.balance = 0;
			if (o.balance) {
				itm.balance = new BigDecimal(o.balance).setScale(2, BigDecimal.ROUND_HALF_UP);
			}

			//println 'passing 4'
			itm.partialpayment = 0;
			if (o.partialpayment) {
				itm.partialpayment = new BigDecimal(o.partialpayment).setScale(2, BigDecimal.ROUND_HALF_UP);
			}

			itm.baseamount = ledger.dailydue;
			itm.groupbaseamount = ledger.dailydue;

			//itm.paytype = it.paytype;
			//itm.txndate = dateSvc.serverDate;
			itm.txndate = currentdate;
			//println 'item = '+itm;
			o.item = itm;
			//if (txndate.toString() == '2006-01-24') println 'current day ' + data.currentDay;
			loan_ledger.create(itm, 'detail');
		}

		loan_ledger.update([objid: ledger.objid, dtlastpaid: txndate], 'dtlastpaid');

		def res = [
			results		: results,
			amnestyid	: amnesty?.amnestyid,
			ledgerid 	: ledger?.objid,
			txndate 	: txndate,
			interest 	: (xpayment? xpayment.totalinterest : 0),
			penalty 	: (xpayment? xpayment.totalpenalty : 0)
		];

		return res;
	}


	private def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}