import com.rameses.annotations.*;
import java.text.*;
import java.rmi.server.UID;

class EditFixLegerPostingService
{
	@ActiveDB('edit_ledger_posting')
	def em;

	@ActiveDB('loan_ledger')
	def loan_ledger;

	@ActiveDB('loanapp')
	def loanapp;

	@ActiveDB('ledgeramnesty')
	def ledgeramnesty;

	@ActiveDB('ledgeramnesty_fix')
	def ledgeramnesty_fix;

	@Service('DateService')
	def dateSvc;

	private def decFormat = new DecimalFormat('#,##0.00');
	private def dateFormat = new SimpleDateFormat('MMM-dd-yyyy');
	private def dateFormat2 = new SimpleDateFormat('yyyy-MM-dd');

	@ProxyMethod
	public def getLedgerInfo( params ) {
		def ledger = loan_ledger.read([objid: params?.ledger?.objid]);
		if (!ledger) throw new Exception('Ledger record does not exist or has already been deleted.');

		def pyts = getPayments(params);

		def data = [ledgerid: ledger?.objid, payments: pyts];
		return data;
	}	

	@ProxyMethod
	public def getPaymentInfo( params ) {
		def pyt = loan_ledger.read([objid: params?.objid], 'payment');
		if (!pyt) throw new Exception('Ledger payment record does not exist or has already been deleted.');

		return pyt;
	}

	def getPayments( params ) {
		def list = em.getFixPayment([objid: params?.refid]);
		list = addPaymentInfo(list);

		return list;
	}

	def addPaymentInfo( src ) {
		def list = [];
		src?.each{ o->
			def i = loan_ledger.read([objid: o?.objid], 'payment');
			def item = [
				objid	: o.objid,
				caption	: 'Date: ' + dateFormat.format(o.txndate) + ' Ref. No.: ' + o.refno + ' Amount: ' + decFormat.format(o.amount), 
				refno	: o.refno,
				amount 	: o.amount,
				txndate : o.txndate
			]
			list << item;
		}

		return list;
	}

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		cols << [name: 'partialpayment', caption: 'Partial Payment', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'balance', caption: 'Balance', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'amtpaid', caption: 'Total Payment', type: 'decimal', format: '#,##0.00;(#,##0.00)'];
		cols << [name: 'refno', caption: 'OR No.'];
		cols << [name: 'dtpaid', caption: 'Date Paid', type: 'date', outputFormat: 'MMM-dd-yyyy'];
		cols << [name: 'remarks', caption: 'Remarks'];

		return cols;
	}

	@ProxyMethod
	public def getDetail( params ) {
		def list = em.getFixPostingDetail([objid: params?.refid]);

		def xlist = list?.findAll{ it.refno == params?.payment?.refno }
		xlist?.each{ it.selected = true }

		return list;
	}

	@ProxyMethod
	public def getDetailByRefno( params ) {
		def pyt = loan_ledger.read([objid: params?.paymentid], 'payment');

		def list = em.getFixPostingDetailByRefno([objid: params?.refid, refno: pyt?.refno]);

		return list;
	}

	@ProxyMethod
	public def removeLedgerDetail( params ) {
		def pyt = loan_ledger.read([objid: params?.paymentid], 'payment');
	
		def item = ledgeramnesty.read([objid: params?.objid], 'posting-detail');
		if (item) {
			def fix = ledgeramnesty_fix.read([objid: params?.refid]);

			def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'INTEREST', date: pyt?.txndate]);
			if (rev) {
				rev.amount -= item.partialpayment;
				if (rev.amount < 0) rev.amount = 0;
				loan_ledger.update(rev, 'revenue');
			}

			ledgeramnesty.delete(item, 'posting-detail');
			loan_ledger.delete(item, 'detail');

			def am_balance = pyt?.amnestybalance;

			def list = getPayments([refid: fix?.objid]);
			list = list.findAll{ String.valueOf(it.txndate) + '' + it.refno > String.valueOf(pyt.txndate) + '' + pyt.refno }
			list?.each{ o->
				def p = loan_ledger.read([objid: o?.objid], 'payment');
				p.amnestybalance = am_balance;
				loan_ledger.update(p, 'payment');

				def pd = em.getFixPostingDetailByRefno([objid: fix?.objid, refno: p?.refno]);
				if (pd) {
					def tp = pd?.partialpayment?.sum();
					if (!tp) tp = 0;

					rev = loan_ledger.findRevenueByTagAndDate([objid: p?.parentid, tag: 'INTEREST', date: p?.txndate]);
					if (!rev) {
						rev = [
							objid	: 'LLR' + new UID(),
							parentid: p?.parentid,
							txndate : p?.txndate,
							tag 	: 'INTEREST',
							amount 	: 0
						];
					}

					def interest = p.amnestybalance - p.balance;
					if (!interest || interest < 0) interest = 0;

					if (interest >= tp) {
						rev.amount = tp;
					} else if (interest < tp) {
						rev.amount = interest;
					}

					loan_ledger.save(rev, 'revenue');
					am_balance -= tp;
				}
			}
		}

	}

	def checkIfNull( data, newdata ) {
		if (!data) return newdata;
		return data;
	}

	@ProxyMethod
	public def saveLedgerDetail( params ) {
		def pyt = loan_ledger.read([objid: params?.paymentid], 'payment');
		def fix = ledgeramnesty_fix.read([objid: params?.refid]);

		def dtl  = em.findAmnestyDetail([objid: fix?.objid]);
		def item = ledgeramnesty.read([objid: params?.objid], 'posting-detail');
		if (!item) {
			item = [
				objid 			: params?.objid,
				parentid 		: fix?.objid,
				state 			: 'RECEIVED',
				interestdue 	: 0,
				penaltydue		: 0,
				interestpaid	: 0,
				penaltypaid 	: 0,
				amtbal 			: 0,
				interestbal 	: 0,
				penaltybal 		: 0,
				day				: dtl?.day,
				txndate 		: dateSvc.serverDate,
				baseamount 		: pyt?.amount,
				groupbaseamount : pyt?.amount
			];
		}

		item.amtdue = checkIfNull(params?.amtpaid, 0);
		item.amtpaid = checkIfNull(params?.amtpaid, 0);
		item.dtpaid = params?.dtpaid;
		item.refno = params?.refno;
		item.balance = checkIfNull(params?.balance, 0);
		item.partialpayment = checkIfNull(params?.partialpayment, 0);

		ledgeramnesty.save(item, 'posting-detail');

		item = loan_ledger.read([objid: params?.objid], 'detail');
		if (!item) {
			item = [
				objid 			: params?.objid,
				parentid 		: pyt?.parentid,
				state 			: 'RECEIVED',
				interestdue 	: 0,
				penaltydue		: 0,
				interestpaid	: 0,
				penaltypaid 	: 0,
				amtbal 			: 0,
				interestbal 	: 0,
				penaltybal 		: 0,
				day				: dtl?.day,
				txndate 		: dateSvc.serverDate,
				baseamount 		: pyt?.amount,
				groupbaseamount : pyt?.amount,
				amnestyid 		: fix?.objid
			];
		}

		item.amtdue = checkIfNull(params?.amtpaid, 0);
		item.amtpaid = checkIfNull(params?.amtpaid, 0);
		item.dtpaid = params?.dtpaid;
		item.refno = params?.refno;
		item.balance = checkIfNull(params?.balance, 0);
		item.partialpayment = checkIfNull(params?.partialpayment, 0);

		loan_ledger.save(item, 'detail');

		def rev = loan_ledger.findRevenueByTagAndDate([objid: pyt?.parentid, tag: 'INTEREST', date: pyt?.txndate]);
		if (!rev) {
			rev = [
				objid	: 'LLR' + new UID(),
				parentid: pyt?.parentid,
				txndate : pyt?.txndate,
				tag 	: 'INTEREST',
				amount 	: 0
			];
		}

		def pd = em.getFixPostingDetailByRefno([objid: fix?.objid, refno: pyt?.refno]);
		def tp = pd?.partialpayment?.sum();
		if (!tp) tp = 0;

		def interest = pyt?.amnestybalance - pyt?.balance;
		if (!interest || interest < 0) interest = 0;

		if (interest >= tp) {
			rev.amount = tp;
		} else if (interest < tp) {
			rev.amount = interest;
		}
		loan_ledger.save(rev, 'revenue');

		def am_balance = pyt?.amnestybalance - tp;
		if (!am_balance) am_balance = 0;

		def list = getPayments([refid: fix?.objid]);
		list = list.findAll{ String.valueOf(it.txndate) + '' + it.refno > String.valueOf(pyt.txndate) + '' + pyt.refno }
		list?.each{ o->
			def p = loan_ledger.read([objid: o?.objid], 'payment');
			p.amnestybalance = am_balance;
			loan_ledger.update(p, 'payment');

			pd = em.getFixPostingDetailByRefno([objid: fix?.objid, refno: p?.refno]);
			if (pd) {
				tp = pd?.partialpayment?.sum();
				if (!tp) tp = 0;

				rev = loan_ledger.findRevenueByTagAndDate([objid: p?.parentid, tag: 'INTEREST', date: p?.txndate]);
				if (!rev) {
					rev = [
						objid	: 'LLR' + new UID(),
						parentid: p?.parentid,
						txndate : p?.txndate,
						tag 	: 'INTEREST',
						amount 	: 0
					];
				}

				interest = p?.amnestybalance - p?.balance;
				if (!interest || interest < 0) interest = 0;

				if (interest >= tp) {
					rev.amount = tp;
				} else if (interest < tp) {
					rev.amount = interest;
				}
				loan_ledger.save(rev, 'revenue');

				am_balance -= tp;
			}
		}
	}

	def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}