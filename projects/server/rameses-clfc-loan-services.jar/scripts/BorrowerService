import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class BorrowerService {

	@DataContext('borrower') 
	def em; 

	@DataContext('customerindividual') 
	def customerindividual; 

	@DataContext('borrower_bankacct') 
	def borrower_bankacct; 

	@DataContext('borrowerindividual') 
	def borrowerindividual;

	@DataContext('borrowerindividual_children') 
	def borrowerindividual_children;

	@DataContext('borrowerindividual_education') 
	def borrowerindividual_education;

	@DataContext('borrowerindividual_sibling') 
	def borrowerindividual_sibling;

	@DataContext('borrowerindividual_parent') 
	def borrowerindividual_parent;

	@DataContext('sourceofincome') 
	def sourceofincome;

	@DataContext('employment') 
	def employment;

	@ProxyMethod 
	public def create( data ) { 
		def cust = customerindividual.find([ objid: data.objid ]).first(); 
		if ( cust ) data.putAll( cust );  

		def spouse = data.spouse; 
		if ( spouse?.objid ) {
			cust = customerindividual.find([ objid: spouse.objid ]).first(); 
			if ( cust ) {
				spouse.lastname = cust.lastname; 
				spouse.firstname = cust.firstname;
				spouse.middlename = cust.middlename;
			}
		}

		em.create( data ); 
		borrowerindividual.create( data ); 
		updateParent( data ); 
		updateChildren( data );
		updateEducations( data ); 
		updateSiblings( data ); 
		updateOtherIncomes( data );
		updateEmployments( data );
		return data; 
	}

	@ProxyMethod 
	public def update( data ) {
		def o = em.find([ objid: data.objid ]).select('objid').first(); 
		if ( !o ) throw new Exception('borrower not found'); 

		def cust = customerindividual.find([ objid: data.objid ]).first(); 
		if ( cust ) data.putAll( cust );  

		def spouse = data.spouse; 
		if ( spouse?.objid ) {
			cust = customerindividual.find([ objid: spouse.objid ]).first(); 
			if ( cust ) {
				spouse.lastname = cust.lastname; 
				spouse.firstname = cust.firstname;
				spouse.middlename = cust.middlename;
			}
		}

		println '** data' 
		data.each{
			println '>> '+ it;
		}

		em.find([ objid: data.objid ]).update( data );
		borrowerindividual.find([ objid: data.objid ]).update( data );

		if ( data._allow_items_update.toString() == 'false' ) {
			// do not update the items 
		} else {
			updateParent( data ); 
			updateChildren( data );
			updateEducations( data ); 
			updateSiblings( data ); 
			updateOtherIncomes( data );
			updateEmployments( data );
		}
		return data; 		
	}

	@ProxyMethod 
	public def save( data ) {
		def o = em.find([ objid: data.objid ]).select('objid').first(); 
		if ( o ) {
			em.find([ objid: data.objid ]).update( data ); 
		} else {
			em.find([ objid: data.objid ]).create( data ); 
		}

		o = borrowerindividual.find([ objid: data.objid ]).select('objid').first(); 
		if ( o ) {
			borrowerindividual.find([ objid: data.objid ]).update( data ); 
		} else {
			borrowerindividual.find([ objid: data.objid ]).create( data ); 
		}

		if ( data._allow_items_update.toString() == 'false' ) {
			// do not update the items 
		} else {
			updateParent( data ); 
			updateChildren( data );
			updateEducations( data ); 
			updateSiblings( data ); 
			updateOtherIncomes( data );
			updateEmployments( data );
		}
		return data; 		
	}

	@ProxyMethod 
	public def open( param ) {
		def o = em.find([ objid: param.objid ]).first(); 
		if ( !o ) throw new Exception('borrower record not found');

		def ext = borrowerindividual.find([ objid: o.objid ]).first(); 
		if ( ext ) { 
			o.putAll( ext ); 
			if ( o.spouse ) {
				o.spouse.name = createFullName( o.spouse.lastname, o.spouse.firstname, o.spouse.middlename ); 
			}
		} 

		def cust = customerindividual.find([ objid: param.objid ]).first(); 
		if ( cust ) o.putAll( cust );  

		def spouse = o.spouse; 
		if ( spouse?.objid ) {
			cust = customerindividual.find([ objid: spouse.objid ]).first(); 
			if ( cust ) {
				spouse.lastname = cust.lastname; 
				spouse.firstname = cust.firstname;
				spouse.middlename = cust.middlename;
			}
		} 

		def accts = borrower_bankacct.find([ borrowerid: o.objid ]).list(); 		
		o.savingaccts = accts.findAll{( it.type.toString().toUpperCase() == 'SAVING' )} 
		o.checkingaccts = accts.findAll{( it.type.toString().toUpperCase() == 'CHECKING' )} 
		o.otheracct = accts.find{( it.type.toString().toUpperCase() == 'OTHER' )} 

		if ( o.type.toString().toUpperCase() == 'INDIVIDUAL') {
			o.parent = borrowerindividual_parent.find([ objid: o.objid ]).first(); 

			o.children = borrowerindividual_children.find([ borrowerid: o.objid ]).list();  
			o.children.each{ 
				it.employments = employment.find([ refid: it.objid ]).list(); 
				it.otherincomes = sourceofincome.find([ refid: it.objid ]).list(); 
			} 

			o.siblings = borrowerindividual_sibling.find([ borrowerid: o.objid ]).list()
			o.siblings.each { 
				it.employments = employment.find([ refid: it.objid ]).list(); 
				it.otherincomes = sourceofincome.find([ refid: it.objid ]).list(); 
			}

			o.educations = borrowerindividual_education.find([ borrowerid: o.objid ]).list();
			o.employments = employment.find([ refid: o.objid ]).list();			
			o.otherincomes = sourceofincome.find([ refid: o.objid ]).list(); 
		} 
		return o;
	}


	@ProxyMethod(local=true)
	public String createFullName(lname, fname, mname) {
		def s = lname + ', ' + fname; 
		if (mname) s = s + ' ' + mname; 

		return s;
	} 

	private void updateChildren(data) {
		borrowerindividual_children.find([ borrowerid: data.objid]).list().each{ 
			employment.find([ refid: it.objid ]).delete();
			sourceofincome.find([ refid: it.objid ]).delete();
			borrowerindividual_children.find([ objid: it.objid]).delete(); 
		}

		data.children.each{ o-> 
			o.objid = 'CHI'+ new UID();
			o.borrowerid = data.objid; 
			borrowerindividual_children.create( o ); 

			o.employments.each{ e-> 
				e.refid = o.objid; 
				employment.create( e ); 
			} 

			o.otherincomes.each{ oi-> 
				oi.refid = o.objid; 
				employment.create( oi ); 
			} 
		}
	} 

	private void updateEducations(data) { 
		borrowerindividual_education.find([ borrowerid: data.objid ]).delete(); 
		data.educations.each { o->  
			o.borrowerid =  data.objid; 
			borrowerindividual_education.create( o );  
		} 
	} 

	private void updateEmployments(data) {	
		employment.find([ refid: data.objid ]).delete(); 
		data.employments.each { o-> 
			o.refid =  data.objid; 
			employment.create( o );  
		} 
	}

	private void updateParent(data) { 
		borrowerindividual_parent.find([ objid: data.objid ]).delete(); 
		if ( data.parent ) {
			data.parent.objid = data.objid; 
			borrowerindividual_parent.create( data.parent );
		}
	} 

	private void updateSiblings(data) {
		borrowerindividual_sibling.find([ borrowerid: data.objid ]).list().each{
			employment.find([ refid: it.objid ]).delete();
			sourceofincome.find([ refid: it.objid ]).delete();
			borrowerindividual_sibling.find([ objid: it.objid ]).delete();
		} 

		data.siblings.each { o-> 
			o.borrowerid = data.objid; 
			borrowerindividual_sibling.create( o ); 

			o.employments.each { e->  
				e.refid =  o.objid; 
				employment.create( e ); 
			} 
			o.otherincomes.each { oi->  
				oi.refid =  o.objid; 
				sourceofincome.create( oi ); 
			} 
		} 
	} 

	private void updateOtherIncomes(data) { 
		sourceofincome.find([ refid: data.objid ]).delete();
		data.otherincomes.each { o-> 
			o.refid = data.objid; 
			sourceofincome.create( o );
		}
	} 

	private void updateBankAccts(data) { 
		borrower_bankacct.find([ borrowerid: data.objid ]).delete(); 
		data.savingaccts.each{ o-> 
			o.borrowerid = data.objid; 
			o.type = 'SAVING';
			borrower_bankacct.create( o ); 
		}
		data.checkingaccts.each{ o-> 
			o.borrowerid = data.objid; 
			o.type = 'CHECKING';
			borrower_bankacct.create( o ); 
		}

		def o = data.otheracct; 
		if ( o ) { 
			o.borrowerid = data.objid; 
			o.type = o.bankname = 'OTHER'; 
			borrower_bankacct.create( o ); 
		}
	} 
}
