import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;
import java.rmi.server.UID;
import loan.facts.*;
import loan.actions.*;
import java.util.*;

class LoanCapturePaymentService {

	@Env
	def env;

	@ActiveDB("capture_payment")
	def em;

	@ActiveDB("loan_ledger")
	def loan_ledger;

	@ActiveDB("loanapp")
	def loanapp;

	@ActiveDB("fieldcollection")
	def fieldcollection;

	@ActiveDB("specialcollection")
	def specialcollection;

	@ActiveDB("ledger_billing")
	def ledger_billing;

	@ActiveDB("customer")
	def customer;

	@ActiveDB("loan_ledger_payment")
	def loan_ledger_payment;

	@ActiveDB("loan_product_type")
	def product_type;

	@ActiveDB("ledgeramnesty")
	def ledgeramnesty;

	@ActiveDB("ledgeramnesty_fix")
	def ledgeramnesty_fix;

	@ActiveDB("ledgeramnesty_waiver")
	def ledgeramnesty_waiver;

	@ActiveDB("ledgeramnesty_baddebt")
	def ledgeramnesty_baddebt;

	@ActiveDB("ledgeramnesty_smc")
	def ledgeramnesty_smc;

	@ActiveDB("loan_exemption")
	def exemption;

	@ActiveDB("collection_cb")
	def collection_cb;

	@ActiveDB("collection_remittance")
	def remittance;

	@ActiveDB("datatxnlog")
	def txnlog; 

	@Service("DateService")
	def dateSvc;

	@Service("InboxService")
	def inboxSvc;

	@Service("BranchService")
	def branchSvc;

	@Service("NumberService")
	def numSvc;

	@Service("LoanLedgerBillingService")
	def billingSvc;

	@Service("CalendarEventService")
	def calendarSvc;

	@Service("LoanLedgerService")
	def ledgerSvc;

	@Service("RuleExecutorService")
	def ruleSvc;

	@ProxyMethod
	public def getPendingCollectors( params ) {
		if (!params.date) throw new RuntimeException("Please specify date.");

		def list = em.getPendingCapturedPaymentCollectorsByDate(params);
		return list;
	}

	@ProxyMethod
	public def getPendingColumns( params ) {
		def cols = [];

		cols << [name: "borrowername", caption: "Borrower"];
		cols << [name: "amount", caption: "Amount", type: "decimal", format: "#,##0.00"];
		cols << [name: "check.no", caption: "Check No."];
		cols << [name: "check.date", caption: "Check Date", type: "date", outputFormat: "MMM-dd-yyyy"];
		cols << [name: "bank.name", caption: "Bank"];
		cols << [name: "paidby", caption: "Paid By"];
		cols << [name: "dtpaid", caption: "Date Paid"];

		return cols;
	}

	@ProxyMethod
	public def getPendingPayments( params ) {
		if (!params.date) throw new RuntimeException("Please specify date.");
		if (!params.collectorid) throw new RuntimeException("Please specify collectorid.");

		params.searchtext = (params.searchtext? params.searchtext : "") + "%";
		def list = em.getPendingCapturedPaymentsByCollectorAndDate(params);
		if (!list) throw new RuntimeException("No pending captured payments for this collector.");

		return list;
	}

	@ProxyMethod
	public def getForMappingCollectors( params ) {
		if (!params.date) throw new RuntimeException("Please specify date.");

		def list = em.getCapturedPaymentCollectorsByDate( params );
		return list;
	}

	@ProxyMethod
	public def getForMappingCollection( params ) {
		if (!params.date) throw new RuntimeException("Please specify date.");
		if (!params.collectorid) throw new RuntimeException("Please specify collectorid.");

		def list = em.getCapturedPaymentCollectionsByDateAndCollector( params );
		list.eachWithIndex{ itm, idx-> 
			def info = itm.remove("info");
			info = em.serializer.read(info);
			itm.putAll(info);
			if (!itm.scdetailid) itm.scdetailid = "SCD" + new UID();
			if (!itm.name) {
				itm.name = "Capture " + (idx + 1);
			}
			em.update(itm);
		}
		return list;
	}


	def getUser() {
		return [objid: env.USERID, name: env.NAME];
	}

	@ProxyMethod
	public def submitForMapping( params ) {
		def list = getPendingPayments(params);
		if (!list) throw new RuntimeException("No pending captured payments to map.");

		def item = list[0];

		def cp = em.read([objid: item?.captureid]);
		if (!cp) {
			cp  = [
				objid 				: item?.captureid,
				state 				: "FOR_MAPPING",
				trackerid 			: item?.trackerid,
				txndate 			: item?.txndate,
				fieldcollectionid 	: item?.fieldcollectionid,
				specialcollectionid : "SC" + new UID(),
				dtfiled 			: dateSvc.serverDate,
				author				: getUser(),
				collector 			: item?.collector
			];

			def captured_payments = em.getCapturedPaymentByCollectorAndDate([collectorid: item?.collector.objid, date: item?.txndate]);
			if (!captured_payments) captured_payments = [];
			cp.name = "Capture " + (captured_payments.size() + 1);

			em.create(cp);
		}

		list.each{ o->
			def dtl = em.read([objid: o.objid], "cp-detail");
			if (!dtl) {
				dtl = [
					objid 			: o.objid,
					parentid		: item?.captureid,
					scdetailid		: "SCD" + new UID(),
					txnmode 		: o.txnmode,
					dtpaid	 		: o.dtpaid,
					paidby 			: o.paidby,
					borrowername 	: o.borrowername,
					amount			: o.amount,
					payoption 		: o.payoption
				];
				em.create(dtl, "cp-detail");

				if (dtl.payoption == 'check') {
					dtl.bank = o.bank;
					dtl.check = o.check;
					em.update(dtl, "detail-check");
				}
			}

			em.delete([objid: o.objid], "cp-pending");
		}
	}

	@ProxyMethod
	public def open( params ) {
		def data = em.read( params );
		if (!data) throw new RuntimeException("Capture payment record does not exist or has already been deleted.");

		data.list = em.getDetails( data );
		data.list.each{			
			if (it.ledgerid) {
				it.ledger = loan_ledger.findLedgerWithInfo([objid: it.ledgerid]);
				def appc = loanapp.read([objid: it.ledger?.loanapp?.objid], 'loanapp_capture');
				if (appc?.dtreleased) {
					it.ledger.dtreleased = appc.dtreleased;
				}
				//o.ledger.dtreleased = dateSvc.add(o.ledger.dtstarted, "-1");
			}
		}

		return data;
	}

	@ProxyMethod
	public def save( params ) {
		//def data = em.read(params);
		//if (!data) throw new RuntimeException("Capture payment record does not exist or has already been deleted.");

		def data = open( params );

		data.putAll(params);
		if (!data.specialcollectionid) data.specialcollectionid = "SC" + new UID();
		em.update(data);

		data.list.each{
			if (!it.scdetailid) it.scdetailid = "SCD" + new UID();
			em.update(it, "cp-detail");
		}

		//return getCollectionInfo( [collectionid: data.objid] );
		return data;
	}

	@ProxyMethod
	public def submitForVerification( params ) {
		if (!params.list) throw new RuntimeException("Please specify list.");

		def i = params.list?.find{ it.ledgerid == null }
		if (i) throw new Exception("Cannot submit for verification. There are still unmapped payment(s).");

		def data = changeState(params, "FOR_VERIFICATION");

		data.dtsubmitforverification = dateSvc.serverDate;
		data.submittedforverificationby = getUser();
		em.update(data);

 		def msginfo = [ 
			objid 		: data.objid, 
			dtcreated	: data.dtsubmitforverification, 
			refid 		: data.objid, 
			filetype 	: 'capture:payment', 
			message 	: 'Captured payment collection for approval (Collector: ' + data.collector.name + ' Date: ' + data.txndate + ')', 
			senderid	: env.USERID, 
			sendername 	: env.NAME, 
			recipientid : 'APPROVER' 
		]; 
		inboxSvc.addMessage( msginfo );

		return open( data );
	}

	def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Capture payment record does not exist or has already been deleted.");

		if (data.state == state) {
			throw new RuntimeException("Capture payment record is already " + state + ".");
		}

		data.state = state;
		em.update(data);

		def action, remarks;
		switch (state) {
			case 'FOR_MAPPING'		: action = 'FOR MAPPING';
									  remarks = 'For Mapping';
									  break;
			case 'SEND_BACK'		: action = 'SEND BACK';
									  remarks = 'Send Back';
									  break;
			case 'FOR_VERIFICATION' : action = 'FOR VERIFICATION';
									  remarks = 'Submit for verification';
									  break;
			case 'VERIFIED' 		: action = 'VERIFIED';
									  remarks = 'Verified';
									  break;
			case 'REMITTED' 		: action = 'REMITTED';
									  remarks = 'Remitted';
									  break;
		}

		if (action && remarks) {
			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.objid, 
				user    : [objid: env.USERID, username: env.NAME], 
				action	: action, 
				remarks : remarks
			]; 
			txnlog.create( loginfo ); 
		}

		return open( data );
	}

	@ProxyMethod
	public def returnForMapping( params ) {
		def data = changeState(params, "FOR_MAPPING");

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return data;
	}

	@Async
	@ProxyMethod
	public def asyncVerify( params ) {
		return verify(params);
	}

	@ProxyMethod 
	public def verify( params ) {
		def data = changeState(params, "VERIFIED");

		data.dtverified = dateSvc.serverDate;
		data.verifier = getUser();
		em.update(data, 'verify');

		createSpecialCollection( data );
		createBilling( data );
		createFieldCollection( data );

		inboxSvc.removeMessageByRefid([refid: data.objid]);

		return open( data );
	}

	def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}

	def parse( pattern, date ) {
		if (!pattern) pattern = 'yyyy-MM-dd';
		def dt = parseDate(date);
		return new java.text.SimpleDateFormat(pattern).format(dt);
	}

	private void createSpecialCollection( data ) {
		def sc = specialcollection.read([objid: data.specialcollectionid]);
		if (!sc) {
			sc = [
				objid 		: data.specialcollectionid,
				state 		: 'DOWNLOADED',
				billingid 	: data.fieldcollectionid,
				txndate 	: data.txndate,
				txntype 	: 'CAPTURE',
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				collector 	: data.collector
			];
			specialcollection.create(sc);
		}
		data.specialcollectionid = sc.objid;

		def list = em.getDetails(data);

		def ledger, item, app;
		list?.each{ o->
			ledger = loan_ledger.read([objid: o.ledgerid]);
			if (!ledger) throw new Exception('Ledger record does not exist or has already been deleted.');

			app = loanapp.read([objid: ledger.appid]);
			if (!app) throw new Exception('Loanapp record does not exist or has already been deleted.');

			item = [
				objid 			: o.scdetailid,
				parentid		: sc.objid,
				billingdetailid	: 'LSCD' + new UID(),
				routecode 		: app?.route?.code,
				borrower 		: app?.borrower,
				loanapp 		: [objid: app?.objid, appno: app?.appno],
			];

			def i = specialcollection.read([objid: o.scdetailid], 'sc-detail');
			if (!i) {
				specialcollection.create(item, 'sc-detail');
			} else {
				item.billingdetailid = i.billingdetailid;
				specialcollection.update(item, 'sc-detail');
			}
		}
	}


	private void createBilling( data ) {
		def billing = ledger_billing.findByCollectorAndBilldate([collectorid: data.collector.objid, date: data.txndate]);
		if (!billing) {
			def branch = branchSvc.open([:]);
			
			billing = [
				objid 				: data.fieldcollectionid,
				dtcreated 			: dateSvc.serverDate,
				author 				: [objid: env.USERID, name: env.NAME],
				collector 			: data.collector,
				billdate 			: data.txndate,
				branchid 			: branch.code,
				totalfordownload 	: 0,
				totaldownloaded 	: 0,
				totalposted 		: 0,
			];
			ledger_billing.create(billing);
		}

		data.fieldcollectionid = billing.objid;

		def item = ledger_billing.findByBillingidAndItemid([objid: billing?.objid, itemid: data.specialcollectionid]);
		if (!item) {
			item = [
				objid 		: data.specialcollectionid,
				parentid 	: billing?.objid,
				state 		: 'DOWNLOADED',
				dtmodified 	: dateSvc.serverDate,
				modifiedby 	: [objid: env.USERID, name: env.NAME],
				item 		: [objid: data.specialcollectionid, type: 'special']
			];
			ledger_billing.create(item, "billing-item");

			billing.totalfordownload++;
			billing.totaldownloaded++;
			ledger_billing.update(billing);
		}

		data.specialcollectionid = item.objid;

		def _page = 1, _start = 0, _limit = 10;
		def facts, details, xitem, size, detail, param, itm;

		def actions = new RuleAction(); 
		actions.addCommand( "calcInterest", new  CalculateBillingInterest(NS: numSvc) );
		actions.addCommand( "calcPenalty", new  CalculateBillingPenalty(NS: numSvc) );
		actions.addCommand( "calcOthers", new CalculateBillingOthers(NS: numSvc) );
		actions.addCommand( "calcAmountDue", new CalculateBillingAmountDue(NS: numSvc) );
		actions.addCommand( "calcBalance", new CalculateBillingBalance(NS: numSvc) );

		def list = em.getDetails(data);
		if (!list) list = [];
		def currentdate = parseDate(data.txndate);

		while (true) {
			facts = [];
			details = [];
			facts << new CurrDate([currentdate: currentdate]);
			_start = (_page*_limit)-_limit;
			size = ((_page*_limit) < list.size()? (_page*_limit) + 1 : list.size());
			def scdetailid;
			for (int i=_start; i<size; i++) {
				if (i < (_page*_limit)) {
					itm = list[i];
					detail = specialcollection.read([objid: itm.scdetailid], 'sc-detail');

					param = [
						ledgerid 	: itm?.ledgerid,
						currentdate : currentdate,
						detailid 	: detail?.billingdetailid,
						billingid 	: billing?.objid,
						itemid 		: item?.objid
					]

					xitem = createItem(param);

					facts << buildLedgerFact(xitem);
					facts << buildLoanappFact(xitem);
					facts << buildBillingItemFact(xitem);
					facts << buildAmnestyFact(xitem);
					details << xitem;
				}
			}

			ruleSvc.execute( "loanbilling", facts, actions, null );

			details.each{ o->
				def billitem = facts.find{ (it instanceof LoanBillingItem && o.ledgerid == it.ledgerid) }
				o.penalty = billitem.penalty;
				o.others = billitem.others;
				o.amountdue = billitem.amountdue;
				o.balance = billitem.balance;

				def ledgeritem = loan_ledger.findLastLedgerItemByParentId([parentid: o.ledgerid]);		
				if (ledgeritem?.interestbal > 0) {
					o.amountdue += ledgeritem.interestbal;
					o.balance += ledgeritem.interestbal;
					o.interest += ledgeritem.interestbal;
				}
				if (ledgeritem?.penaltybal > 0) {
					o.amountdue += ledgeritem.penaltybal;
					o.balance += ledgeritem.penaltybal;
					o.penalty += ledgeritem.penaltybal;
				}

				def i = ledger_billing.read(o, 'billing-detail');
				if (!i) {
					ledger_billing.create(o, "billing-detail");	
				} else {
					ledger_billing.update(o, 'billing-detail');
				}
			}

			if (size > (_page*_limit)) {
				_page++;
			} else {
				break;
			}
		}

	}
	private void createFieldCollection( data ) {
		data = em.read(data);
		if (!data) throw new Exception('Capture payment record does not exist or has already been deleted.');

		def fc = fieldcollection.read([objid: data.fieldcollectionid]);
		if (!fc) {
			def branch = branchSvc.open([:]);

			fc = [
				objid 		: data.fieldcollectionid,
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				branchid 	: branch.code,
				billdate 	: data.txndate,
				collector 	: data.collector
			];
			fieldcollection.create(fc);
		}

		def item = fieldcollection.read([objid: data.specialcollectionid], "fc-item");
		if (!item) {
			item = [
				objid 		: data.specialcollectionid,
				parentid	: fc.objid,
				state 		: 'DRAFT',
				dtfiled 	: dateSvc.serverDate,
				author 		: [objid: env.USERID, name: env.NAME],
				item 		: [objid: data.specialcollectionid, type: 'special'],
				trackerid 	: data.trackerid,
				totalcount 	: data.list.size(),
				totalamount : data.list.amount.sum()
			];
			fieldcollection.create(item, "fc-item");
		}

		def list = em.getDetails(data);

		def xitem, loan, payment, billing, sc, refno;

		list?.each{ o->
			xitem = em.read(o, 'cp-detail');
			if (xitem) {
				sc = specialcollection.read([objid: xitem.scdetailid], 'sc-detail');

				billing = ledger_billing.read([objid: sc?.billingdetailid], "billing-detail");
				if (!billing) throw new Exception("Billing detail record does not exist or has already been deleted.");

				loan = fieldcollection.read([objid: sc?.billingdetailid], 'fc-loan');
				if (!loan) {
					loan = [
						objid	 			: sc?.billingdetailid,
						parentid 			: item?.objid,
						fieldcollectionid 	: fc.objid,
						loanapp 			: sc?.loanapp,
						borrower 			: sc?.borrower,
						routecode 			: sc?.routecode,
						noofpayments 		: 0,
						version 			: 1
					]
					fieldcollection.create(loan, "fc-loan");
				} else {
					if (!loan.version) loan.version = 1;
					fieldcollection.update(loan, 'fc-loan');
				}

				payment = fieldcollection.read([objid: xitem.objid], 'fc-payment');
				if (!payment) {
					refno = billing.refno + (loan.noofpayments > 1? loan.noofpayments : '');
					payment = [
						objid 				: xitem.objid,
						parentid			: loan.objid,
						itemid 				: loan.parentid,
						fieldcollectionid 	: fc?.objid,
						dtfiled 			: dateSvc.serverDate,
						author 				: [objid: env.USERID, name: env.NAME],
						txnmode 			: 'ONLINE',
						dtpaid				: xitem.dtpaid,
						refno 				: refno,
						paytype 			: billing.paymentmethod,
						amount 				: xitem.amount,
						paidby 				: xitem.paidby,
						payoption 			: xitem.payoption,
						version				: 1
					];
					fieldcollection.create(payment, "fc-payment");

					if (xitem.payoption == 'check') {
						payment.bank = xitem.bank;
						payment.check = xitem.check;
						fieldcollection.update(payment, "payment-check");
					}

					loan.noofpayments++;
					fieldcollection.update(loan, "loan-noofpayments");
				}
			}
		}
	}

	private def createItem( params ) {
		def ledger = loan_ledger.read([objid: params.ledgerid]);

		def currentdate = parseDate(params.currentdate);
		def maturitydate;
		if (ledger?.dtmatured) {
			maturitydate = parseDate(ledger?.dtmatured);
		}
		if (!ledger.overduepenalty) ledger.overduepenalty = 0;
		//if (1==1) {
		if (maturitydate && (currentdate.compareTo(maturitydate) > 0) && ledger?.overduepenalty == 0) {
			def p = product_type.read([name: ledger?.producttypeid])
			ledger.overduepenalty = ledgerSvc.computeOverduePenalty([balance: ledger.balance, pastduerate: (p.pastduerate? p.pastduerate : 0.00)]);
		}
		loan_ledger.update(ledger, 'overduepenalty');

		def app = loanapp.read([objid: ledger?.appid]);
		def appc = loanapp.read([objid: ledger?.appid], 'loanapp_capture');

		def cust = customer.read([objid: app?.borrower?.objid]);

		def pyt = loan_ledger_payment.findByParentid([parentid: ledger?.objid]);

		def item = [
			objid 				: params.detailid,
			parentid 			: params.itemid,
			billingid 			: params.billingid,
			ledgerid 			: ledger?.objid,
			route 				: app?.route,
			acctid 				: ledger?.acctid,
			loanappid 			: ledger?.appid,
			acctname 			: ledger?.acctname,
			loanamount 			: app?.loanamount,
			loandate 			: appc?.dtreleased,
			term 				: ledger?.term,
			appno 				: app?.appno,
			overpaymentamount	: ledger?.overpaymentamount,
			txndate 			: params.currentdate,
			dailydue			: ledger?.dailydue,
			dtreleased			: appc?.dtreleased,
			dtmatured			: ledger?.dtmatured,
			producttypeid		: ledger?.producttypeid,
			paymentmethod		: ledger?.paymentmethod,
			interestamount		: ledger?.interestamount,
			homeaddress			: cust?.address?.text,
			collectionaddress	: '',
			interest			: 0,
			others				: 0,
			overduepenalty		: ledger?.overduepenalty,
			isfirstbill			: (pyt? 0 : 1)
		];
		item.refno = billingSvc.getRefno([routecode: item?.route?.code]);

		return item;
	}

	public def buildLedgerFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		def item = [
			ledgerid 		: data.objid,
			appid 			: data.appid,
			dtmatured		: data.dtmatured,
			dtstarted		: data.dtstarted,
			dtlastpaid 		: data.dtlastpaid,
			currentdate 	: params.txndate,
			balance 		: data.balance,
			overduepenalty 	: data.overduepenalty,
			balance 		: data.balance,
			overpayment 	: data.overpaymentamount,
			hasamnesty 		: false,
			paymentmethod 	: data.paymentmethod
		];

		def appc = loanapp.read([objid: data.appid], 'loanapp_capture');
		if (appc) item.dtreleased = appc.dtreleased;

		def am = ledgeramnesty.findActiveByDateAndLedgerid([date: parse("yyyy-MM-dd", params.txndate), ledgerid: data?.objid]);
		//def am = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: data.objid, date: parse("yyyy-MM-dd", params.txndate)]);
		if (am) item.hasamnesty = true;

		return new LoanLedger(item);
	}

	public def buildLoanappFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		def producttype = product_type.read([name: data.producttypeid]);
		def item = [
			appid 			: data.appid,
			principal 		: data.totalprincipal,
			interest 		: data.interestamount,
			absentrate 		: producttype.absentpenalty,
			absentpenalty 	: data.absentpenalty,
			underpytrate 	: producttype.underpaymentpenalty,
			intrate 		: producttype.interestrate,
			schedule 		: data.dailydue,
			term 			: data.term,
			scheduledate 	: data.dtcurrentschedule
		];

		return new LoanApp(item);
	}

	public def buildBillingItemFact( params ) {
		def data = loan_ledger.read([objid: params.ledgerid]);
		
		Calendar c = Calendar.getInstance();
		c.setTime(params.txndate);
		def hassunday = false;
		if ((c.get(Calendar.DAY_OF_WEEK) == 1)) hassunday = true;

		def avgamount = data.dailydue;
		if (data.paymentmethod == 'over') avgamount = ledger_billing.findAvgOverpaymentAmount([parentid: data.objid]).groupbaseamount;
		
		def item = [
			ledgerid 		: data.objid,
			hassunday 		: hassunday,
			avgamount 		: avgamount,
			currentdate 	: params.txndate,
			dtschedule 		: data.dtcurrentschedule,
		]

		def days = dateSvc.getDaysDiff(item.dtschedule, item.currentdate);
		item.noofholidays = calendarSvc.getNoOfHolidays([lastscheduledate: item.dtschedule, item:[trialAndError: 0, totalDays: days]]);
		def prm = [startdate: item.dtschedule, enddate: item.currentdate, ledgerid: data.objid];
		def e = exemption.findTotaldaysExemptedByStartdateAndEnddateAndLedgeridWithoutHolidays(prm);
		item.noofdaysexempted =  (e.totaldays? e.totaldays : 0);

		return new LoanBillingItem(item);
	}

	private def buildAmnestyFact( params ) {
		def prm = [
			date 	: parse("yyyy-MM-dd", params.txndate),
			ledgerid: params?.ledgerid
		]
		def item = [:];
		def data = ledgeramnesty.findActiveByDateAndLedgerid(prm);
		//def data = amnesty.findActiveAmnestyByLedgeridAndDate([ledgerid: params.ledgerid, date: parse("yyyy-MM-dd", params.txndate)]);
		if (data) {
			//println 'type ' + data?.type;
			switch (data?.type) {
				case 'WAIVER' 	: item = buildAmnestyWaiverFact(data); break;
				case 'FIX'		: item = buildAmnestyFixFact(data); break;
				case 'BAD_DEBT' : item = buildAmnestyBadDebtFact(data); break;
				case 'SMC' 		: item = buildAmnestySMCFact(data); break;
			}
			/*
			item.ledgerid = data.ledgerid;
			item.balance = data.balance;
			item.type = data.amnestyoption;
			item.waivedinterest = (data.iswaiveinterest > 0? true : false);
			item.waivedpenalty = (data.iswaivepenalty > 0? true : false);
			*/
		}

		//throw new Exception('stopping');

		return new Amnesty(item);
	}

	private def buildAmnestyWaiverFact( am ) {
		def data = [type: 'WAIVER'];

		data.ledgerid = am?.ledgerid;

		def l = loan_ledger.read([objid: am?.ledgerid]);
		if (!l) throw new Exception('Ledger record does not exist or has already been deleted.');

		data.balance = l.balance;

		def ac = ledgeramnesty_waiver.read([objid: am?.refid]);
		if (!ac) throw new Exception('Waiver record does not exist or has already been deleted.');

		data.waivedinterest = ac?.waiveinterest;
		data.waivedpenalty = ac?.waivepenalty;

		return data;

	}

	private def buildAmnestyFixFact( am ) {
		def data = [type: 'FIX']

		data.ledgerid = am?.ledgerid;

		def ac = ledgeramnesty_fix.read([objid: am?.refid]);
		if (!ac) throw new Exception('Fix amnesty record does not exist or has already been deleted.');

		data.balance = ac?.balance;
		data.waivedinterest = false;
		data.waivedpenalty = false;

		return data;
	}

	private def buildAmnestyBadDebtFact( am ) {
		def data = [type: 'BAD_DEBT'];

		data.ledgerid = am?.ledgerid;

		def ac = ledgeramnesty_baddebt([objid: am?.refid]);
		if (!ac) throw new Exception('Bad debt record does not exist or has already been deleted.');

		data.balance = ac?.amount;
		data.waivedinterest = false;
		data.waivedpenalty = false;

		return data;
	}

	private def buildAmnestySMCFact( am ) {
		def data = [type: 'SMC'];

		data.ledgerid = am?.ledgerid;

		def ac = ledgeramnesty_smc.read([objid: am?.refid]);
		if (!ac) throw new Exception('SMC record does not exist or has already been deleted.');

		data.balance = ac?.balance;
		data.waivedinterest = false;
		data.waivedpenalty = false;

		return data;
	}

	@ProxyMethod
	public def remit( params ) {
		if (!params.cbsno) throw new Exception("Please specify cbsno.")

		def data = changeState(params, 'REMITTED');

		def prm = [
			collectionid: data.fieldcollectionid,
			groupid		: data.specialcollectionid,
			grouptype 	: 'special'
		];
		def cb = collection_cb.findCashbreakdown(prm);
		if (!cb) throw new Exception("No cash breakdown sheet has been created for this collection.");

		def cbsno = params.cbsno.toUpperCase();
		if (cb.cbsno != cbsno) {
			throw new Exception("CBS No. inputted does not match cbs no. generated for this collection.");
		}
		

		createRemittance(params);

		if (!data.cbsno) data.cbsno = params.cbsno;
		data.dtremitted = dateSvc.serverDate;
		data.remittedby = [objid: env.USERID, name: env.NAME];
		em.update(data, 'remit');

		prm = [
			objid 	: data.fieldcollectionid,
			itemid 	: data.specialcollectionid
		];
		def billing = ledger_billing.findByBillingidAndItemid(prm);
		if (billing) {
			billing.state = 'REMITTED';
			ledger_billing.changeState(billing);
		}

		def sc = specialcollection.read([objid: data.specialcollectionid]);
		if (sc) {
			sc.state = 'REMITTED';
			specialcollection.update(sc);
		}

		return open(data);
	}

	private void createRemittance( params ) {
		def data = em.read([objid: params.objid]);
		if (!data) throw new Exception("Capture record does not exist or has already been deleted.");

		def list = em.getDetails(data);
		def totalaccts = list?.size();
		if (!totalaccts) totalaccts = 0;

		def totalamount = list?.amount?.sum();
		if (!totalamount) totalamount = 0;

		def item = fieldcollection.read([objid: data.specialcollectionid], 'fc-item');
		if (!item) throw new Exception('Field collection item record does not exist or has already been delted.');

		item.state = 'REMITTED';
		item.cbsno = params.cbsno;
		item.totalcount = totalaccts;
		item.totalamount = totalamount;
		fieldcollection.update(item, 'fc-item');

		def sc = specialcollection.read([objid: data.specialcollectionid]);
		if (!sc) throw new Exception('Special collection record does not exist or has already been deleted.');

		def param = [
			collectionid 	: sc.billingid,
			groupid 		: sc.objid,
			grouptype 		: 'special'
		];

		def rem = remittance.findCollectionRemittance(param);
		if (!rem) {
			rem = [
				objid 					: 'REM' + new UID(),
				state 					: 'FOR_POSTING',
				dtfiled 				: dateSvc.serverDate,
				author 					: [objid: env.USERID, name: env.NAME],
				txndate 				: sc.txndate,
				collector 				: sc.collector,
				collection 				: [objid: sc.billingid, type: 'FIELD'],
				group 					: [objid: sc.objid, type: 'special'],
				totalacctscollected 	: totalaccts,
				totalamount 			: totalamount,
				cbsno 					: params.cbsno
			];
			remittance.create(rem);
		}

		def detail, scdetail, payment;

		list?.each{ o->
			detail = remittance.findRemittanceDetailByRefid([refid: o.objid]);
			if (!detail) {
				scdetail = specialcollection.read([objid: o.scdetailid], "sc-detail");
				if (!scdetail) throw new Exception("Special collection detail ecord does not exist or has already been deleted.");

				payment = fieldcollection.read(o, "fc-payment");
				if (!payment) throw new Exception("Payment record does not exist or has already been deleted.");

				detail = [
					objid 		: 'REMDTL' + new UID(),
					parentid 	: rem.objid,
					refid 		: o.objid,
					borrower 	: scdetail.borrower,
					loanapp 	: scdetail.loanapp,
					routecode 	: scdetail.routecode,
					refno 		: payment.refno,
					amount 		: payment.amount,
					paytype 	: payment.paytype,
					payoption 	: payment.payoption,
					dtpaid 		: payment.dtpaid,
					paidby 		: payment.paidby
				]

				remittance.create(detail, "rem-detail");

				if (payment.payoption == 'check') {
					detail.bank = payment.bank;
					detail.check = payment.check;
					remittance.update(detail, "rem-detail-check");
				}

			}
		}
	}
} 